{"version":3,"file":"nipkow-sdk.esm.js","sources":["../src/constants/network.ts","../src/constants/derivationPaths.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/httpClient.ts","../src/Allegory.ts","../src/Persist.ts","../src/AddressAPI.ts","../src/TransactionAPI.ts","../src/ChainAPI.ts","../src/Utils.ts","../src/Wallet.ts","../src/Allpay.ts","../src/AuthAPI.ts","../src/BlockAPI.ts","../src/MerkleBranchAPI.ts","../src/ScriptHashAPI.ts","../src/UserAPI.ts"],"sourcesContent":["export default {\n  BITCOIN_SV: {\n    bip32: {\n      public: 0x0488b21e,\n      private: 0x0488ade4,\n    },\n    bech32: '',\n    messagePrefix: 'unused',\n    pubKeyHash: 0x00,\n    scriptHash: 0x05,\n    wif: 0x80,\n  },\n  BITCOIN_SV_REGTEST: {\n    bip32: {\n      public: 0x043587cf,\n      private: 0x04358394,\n    },\n    bech32: 'bcrt',\n    messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n    pubKeyHash: 0x6f,\n    scriptHash: 0xc4,\n    wif: 0xef,\n    p2wpkh: {\n      baseNetwork: 'regtest',\n      messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n      bech32: 'bcrt',\n      bip32: {\n        public: 0x045f1cf6,\n        private: 0x045f18bc,\n      },\n      pubKeyHash: 0x6f,\n      scriptHash: 0xc4,\n      wif: 0xef,\n    },\n    p2wpkhInP2sh: {\n      baseNetwork: 'regtest',\n      messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n      bech32: 'bcrt',\n      bip32: {\n        public: 0x044a5262,\n        private: 0x044a4e28,\n      },\n      pubKeyHash: 0x6f,\n      scriptHash: 0xc4,\n      wif: 0xef,\n    },\n    p2wsh: {\n      baseNetwork: 'regtest',\n      messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n      bech32: 'bcrt',\n      bip32: {\n        public: 0x02575483,\n        private: 0x02575048,\n      },\n      pubKeyHash: 0x6f,\n      scriptHash: 0xc4,\n      wif: 0xef,\n    },\n    p2wshInP2sh: {\n      baseNetwork: 'regtest',\n      messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n      bech32: 'bcrt',\n      bip32: {\n        public: 0x024289ef,\n        private: 0x024285b5,\n      },\n      pubKeyHash: 0x6f,\n      scriptHash: 0xc4,\n      wif: 0xef,\n    },\n  },\n  BITCOIN_SV_TESTNET: {\n    bip32: {\n      public: 0x043587cf,\n      private: 0x04358394,\n    },\n    bech32: 'tb',\n    messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n    pubKeyHash: 0x6f,\n    scriptHash: 0xc4,\n    wif: 0xef,\n    p2wpkh: {\n      baseNetwork: 'testnet',\n      messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n      bech32: 'tb',\n      bip32: {\n        public: 0x045f1cf6,\n        private: 0x045f18bc,\n      },\n      pubKeyHash: 0x6f,\n      scriptHash: 0xc4,\n      wif: 0xef,\n    },\n    p2wsh: {\n      baseNetwork: 'testnet',\n      messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n      bech32: 'tb',\n      bip32: {\n        public: 0x02575483,\n        private: 0x02575048,\n      },\n      pubKeyHash: 0x6f,\n      scriptHash: 0xc4,\n      wif: 0xef,\n    },\n    p2wpkhInP2sh: {\n      baseNetwork: 'testnet',\n      messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n      bech32: 'tb',\n      bip32: {\n        public: 0x044a5262,\n        private: 0x044a4e28,\n      },\n      pubKeyHash: 0x6f,\n      scriptHash: 0xc4,\n      wif: 0xef,\n    },\n    p2wshInP2sh: {\n      baseNetwork: 'testnet',\n      messagePrefix: '\\x18Bitcoin Signed Message:\\n',\n      bech32: 'tb',\n      bip32: {\n        public: 0x024289ef,\n        private: 0x024285b5,\n      },\n      pubKeyHash: 0x6f,\n      scriptHash: 0xc4,\n      wif: 0xef,\n    },\n  },\n};\n","export default {\n  BITCOIN_SV: {\n    BIP32: {\n      derivationPath: 'm/0',\n    },\n    BIP44: {\n      purpose: 44,\n      coin: 236,\n      account: 0,\n      change: 0,\n      derivationPath: \"m/44'/236'/0'/0\",\n      nUTXODerivationPath: \"m/44'/236'/1'/0\",\n    },\n  },\n  BITCOIN_SV_TESTNET: {\n    BIP32: {\n      derivationPath: 'm/0',\n    },\n    BIP44: {\n      purpose: 44,\n      coin: 1,\n      account: 0,\n      change: 0,\n      derivationPath: 'm/44/1/0/0',\n      nUTXODerivationPath: 'm/44/1/1/0',\n    },\n  },\n  BITCOIN_SV_REGTEST: {\n    BIP32: {\n      derivationPath: 'm/0',\n    },\n    BIP44: {\n      purpose: 44,\n      coin: 1,\n      account: 0,\n      change: 0,\n      derivationPath: 'm/44/1/0/0',\n      nUTXODerivationPath: 'm/44/1/1/0',\n    },\n  },\n};\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","import https from 'https';\nimport axios, { AxiosInstance, AxiosRequestConfig } from 'axios';\n\nlet httpReq: AxiosInstance;\n\nexport const init = (host: string, port: number) => {\n  httpReq = axios.create({\n    baseURL: `https://${host}:${port}/v1`,\n    httpsAgent: new https.Agent({\n      rejectUnauthorized: false,\n    }),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n  httpReq.interceptors.request.use(\n    (config) => {\n      const token = localStorage.getItem('sessionKey');\n      config.headers.Authorization = token ? `Bearer ${token}` : '';\n      return config;\n    },\n    (error) => {\n      console.log(error);\n      return Promise.reject(error);\n    }\n  );\n  httpReq.interceptors.response.use(\n    (response) => {\n      return response;\n    },\n    async (error) => {\n      if (error && error.response && error.response.status === 403) {\n        try {\n          const userName: string = localStorage.getItem('userName')!;\n          const password: string = localStorage.getItem('password')!;\n          const {\n            data: {\n              auth: { sessionKey },\n            },\n          } = await post('auth', { userName, password });\n          if (sessionKey) {\n            localStorage.setItem('sessionKey', sessionKey);\n            Promise.resolve();\n          } else {\n            throw new Error('Invalid sessionKey');\n          }\n        } catch (error) {\n          return Promise.reject(error);\n        }\n      } else {\n        return new Promise((resolve, reject) => {\n          reject(error);\n        });\n      }\n    }\n  );\n};\n\nexport const get = async (url: string, config?: AxiosRequestConfig) => {\n  try {\n    const response = await httpReq.get(url, config);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const post = async (\n  url: string,\n  data?: any,\n  config?: AxiosRequestConfig\n) => {\n  try {\n    const response = await httpReq.post(url, data, config);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const put = async (\n  url: string,\n  data?: any,\n  config?: AxiosRequestConfig\n) => {\n  try {\n    const response = await httpReq.put(url, data, config);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const deleteR = async (url: string, config?: AxiosRequestConfig) => {\n  try {\n    const response = await httpReq.delete(url, config);\n    return response;\n  } catch (error) {\n    throw error;\n  }\n};\n","import CBOR from 'cbor-js';\n\nclass Allegory {\n  private _version!: number;\n  public get version(): number {\n    return this._version;\n  }\n  public set version(value: number) {\n    this._version = value;\n  }\n  private _name!: number[];\n  public get name(): number[] {\n    return this._name;\n  }\n  public set name(value: number[]) {\n    this._name = value;\n  }\n  private _action!: Action;\n  public get action(): Action {\n    return this._action;\n  }\n  public set action(value: Action) {\n    this._action = value;\n  }\n}\n\ntype Action = ProducerAction | OwnerAction;\n\nexport class ProducerAction {\n  private _producerInput!: Index;\n  public get producerInput(): Index {\n    return this._producerInput;\n  }\n  public set producerInput(value: Index) {\n    this._producerInput = value;\n  }\n  private _producerOutput!: ProducerOutput;\n  public get producerOutput(): ProducerOutput {\n    return this._producerOutput;\n  }\n  public set producerOutput(value: ProducerOutput) {\n    this._producerOutput = value;\n  }\n  private _pOwnerOutput?: OwnerOutput;\n  public get pOwnerOutput(): OwnerOutput {\n    return this._pOwnerOutput!;\n  }\n  public set pOwnerOutput(value: OwnerOutput) {\n    this._pOwnerOutput = value;\n  }\n  private _extensions!: Extension[];\n  public get extensions(): Extension[] {\n    return this._extensions;\n  }\n  public set extensions(value: Extension[]) {\n    this._extensions = value;\n  }\n}\n\nexport class OwnerAction {\n  private _ownerInput!: Index;\n  public get ownerInput(): Index {\n    return this._ownerInput;\n  }\n  public set ownerInput(value: Index) {\n    this._ownerInput = value;\n  }\n  private _ownerOutput!: OwnerOutput;\n  public get ownerOutput(): OwnerOutput {\n    return this._ownerOutput;\n  }\n  public set ownerOutput(value: OwnerOutput) {\n    this._ownerOutput = value;\n  }\n  private _oProxyProviders!: ProxyProvider[];\n  public get oProxyProviders(): ProxyProvider[] {\n    return this._oProxyProviders;\n  }\n  public set oProxyProviders(value: ProxyProvider[]) {\n    this._oProxyProviders = value;\n  }\n}\n\nclass Index {\n  private _index!: number;\n  public get index(): number {\n    return this._index;\n  }\n  public set index(value: number) {\n    this._index = value;\n  }\n}\n\nclass ProducerOutput {\n  private _producer!: Index;\n  public get producer(): Index {\n    return this._producer;\n  }\n  public set producer(value: Index) {\n    this._producer = value;\n  }\n  private _pVendorEndpoint?: Endpoint;\n  public get pVendorEndpoint(): Endpoint {\n    return this._pVendorEndpoint!;\n  }\n  public set pVendorEndpoint(value: Endpoint) {\n    this._pVendorEndpoint = value;\n  }\n}\n\nclass OwnerOutput {\n  private _owner!: Index;\n  public get owner(): Index {\n    return this._owner;\n  }\n  public set owner(value: Index) {\n    this._owner = value;\n  }\n  private _oVendorEndpoint?: Endpoint;\n  public get oVendorEndpoint(): Endpoint {\n    return this._oVendorEndpoint!;\n  }\n  public set oVendorEndpoint(value: Endpoint) {\n    this._oVendorEndpoint = value;\n  }\n}\n\nexport type Extension = OwnerExtension | ProducerExtension;\n\nexport class OwnerExtension {\n  private _ownerOutputEx!: OwnerOutput;\n  public get ownerOutputEx(): OwnerOutput {\n    return this._ownerOutputEx;\n  }\n  public set ownerOutputEx(value: OwnerOutput) {\n    this._ownerOutputEx = value;\n  }\n  private _codePoint!: number;\n  public get codePoint(): number {\n    return this._codePoint;\n  }\n  public set codePoint(value: number) {\n    this._codePoint = value;\n  }\n}\n\nexport class ProducerExtension {\n  private _producerOutputEx!: ProducerOutput;\n  public get producerOutputEx(): ProducerOutput {\n    return this._producerOutputEx;\n  }\n  public set producerOutputEx(value: ProducerOutput) {\n    this._producerOutputEx = value;\n  }\n  private _codePoint!: number;\n  public get codePoint(): number {\n    return this._codePoint;\n  }\n  public set codePoint(value: number) {\n    this._codePoint = value;\n  }\n}\n\nclass Endpoint {\n  private _protocol!: string;\n  public get protocol(): string {\n    return this._protocol;\n  }\n  public set protocol(value: string) {\n    this._protocol = value;\n  }\n  private _uri!: string;\n  public get uri(): string {\n    return this._uri;\n  }\n  public set uri(value: string) {\n    this._uri = value;\n  }\n}\n\nclass ProxyProvider {\n  private _service!: string;\n  public get service(): string {\n    return this._service;\n  }\n  public set service(value: string) {\n    this._service = value;\n  }\n  private _mode!: string;\n  public get mode(): string {\n    return this._mode;\n  }\n  public set mode(value: string) {\n    this._mode = value;\n  }\n  private _endpoint!: Endpoint;\n  public get endpoint(): Endpoint {\n    return this._endpoint;\n  }\n  public set endpoint(value: Endpoint) {\n    this._endpoint = value;\n  }\n  private _registration!: Registration;\n  public get registration(): Registration {\n    return this._registration;\n  }\n  public set registration(value: Registration) {\n    this._registration = value;\n  }\n}\n\nclass Registration {\n  private _addressCommitment!: string;\n  public get addressCommitment(): string {\n    return this._addressCommitment;\n  }\n  public set addressCommitment(value: string) {\n    this._addressCommitment = value;\n  }\n  private _utxoCommitment!: string;\n  public get utxoCommitment(): string {\n    return this._utxoCommitment;\n  }\n  public set utxoCommitment(value: string) {\n    this._utxoCommitment = value;\n  }\n  private _signature!: string;\n  public get signature(): string {\n    return this._signature;\n  }\n  public set signature(value: string) {\n    this._signature = value;\n  }\n  private _expiry!: number;\n  public get expiry(): number {\n    return this._expiry;\n  }\n  public set expiry(value: number) {\n    this._expiry = value;\n  }\n}\n\nexport function getAllegoryType(decodedCBOR: any): Allegory {\n  const allegory = new Allegory();\n  if (decodedCBOR.length >= 2) {\n    allegory.version = decodedCBOR[1];\n    allegory.name = decodedCBOR[2];\n    if (decodedCBOR[3].length === 4) {\n      allegory.action = _getOwnerAction(decodedCBOR[3]);\n    }\n    if (decodedCBOR[3].length === 5) {\n      allegory.action = _getProducerAction(decodedCBOR[3]);\n    }\n  }\n  return allegory;\n}\n\nfunction _getOwnerAction(data: any): OwnerAction {\n  const ownerAction = new OwnerAction();\n  ownerAction.ownerInput = _getIndex(data[1]);\n  ownerAction.ownerOutput = _getOwnerOutput(data[2]);\n  ownerAction.oProxyProviders = _getProxyProviders(data[3]);\n  return ownerAction;\n}\n\nfunction _getIndex(data: any[]) {\n  const index = new Index();\n  index.index = data[1];\n  return index;\n}\n\nfunction _getOwnerOutput(data: any[]) {\n  const ownerOutput = new OwnerOutput();\n  ownerOutput.owner = _getIndex(data[1]);\n  ownerOutput.oVendorEndpoint = _getVendorEndpoint(data[2]);\n  return ownerOutput;\n}\n\nfunction _getVendorEndpoint(data: any[]) {\n  return _getEndPoint(data[0]);\n}\n\nfunction _getProxyProviders(datas: any[]) {\n  const proxyProviders: ProxyProvider[] = datas.map((data: any[]) => {\n    const proxyProvider = new ProxyProvider();\n    proxyProvider.service = data[1];\n    proxyProvider.mode = data[2];\n    proxyProvider.endpoint = _getEndPoint(data[3]);\n    proxyProvider.registration = _getRegistration(data[4]);\n    return proxyProvider;\n  });\n  return proxyProviders;\n}\n\nfunction _getRegistration(data: any[]) {\n  const registration = new Registration();\n  registration.addressCommitment = data[1];\n  registration.utxoCommitment = data[2];\n  registration.signature = data[3];\n  registration.expiry = data[4];\n  return registration;\n}\n\nfunction _getProducerAction(data: any): ProducerAction {\n  const producerAction = new ProducerAction();\n  producerAction.producerInput = _getIndex(data[1]);\n  producerAction.producerOutput = _getProducerOutput(data[2]);\n  if (data[3].length > 0) {\n    producerAction.pOwnerOutput = _getPOwnerOutput(data[3]);\n  }\n  producerAction.extensions = _getExtensions(data[4]);\n  return producerAction;\n}\n\nfunction _getProducerOutput(data: any[]) {\n  const producerOutput = new ProducerOutput();\n  producerOutput.producer = _getIndex(data[1]);\n  producerOutput.pVendorEndpoint = _getEndPoint(data[2][0]);\n  return producerOutput;\n}\n\nfunction _getPOwnerOutput(data: any[]) {\n  const ownerOutput = new OwnerOutput();\n  ownerOutput.owner = _getIndex(data[1]);\n  ownerOutput.oVendorEndpoint = _getVendorEndpoint(data[2]);\n  return ownerOutput;\n}\n\nfunction _getExtensions(datas: any[]) {\n  const extensions: Extension[] = datas.map((data: any[]) => {\n    if (data[0] === 0) {\n      return _getOwnerExtension(data);\n    } else {\n      return _getProducerExtension(data);\n    }\n  });\n  return extensions;\n}\n\nfunction _getOwnerExtension(data: any[]) {\n  const ownerExtension = new OwnerExtension();\n  ownerExtension.ownerOutputEx = _getOwnerOutput(data[1]);\n  ownerExtension.codePoint = data[2];\n  return ownerExtension;\n}\n\nfunction _getProducerExtension(data: any[]) {\n  const producerExtension = new ProducerExtension();\n  producerExtension.producerOutputEx = _getProducerOutput(data[1]);\n  producerExtension.codePoint = data[2];\n  return producerExtension;\n}\n\nfunction _getEndPoint(data: any[]) {\n  const endpoint = new Endpoint();\n  endpoint.protocol = data[1];\n  endpoint.uri = data[2];\n  return endpoint;\n}\n\nexport function removeOpReturn(data: string) {\n  const prefixRemoved = data.substring(36);\n  const opcode = parseInt(prefixRemoved.substring(0, 2), 16);\n  if (opcode <= 0x4b) {\n    return prefixRemoved.substring(2);\n    // remaining\n  } else if (opcode === 0x4c) {\n    return prefixRemoved.substring(4);\n    // take 2\n  } else if (opcode === 0x4d) {\n    return prefixRemoved.substring(6);\n    // take 4\n  } else if (opcode === 0x4e) {\n    return prefixRemoved.substring(10);\n    // take 8\n  } else if (opcode === 0x99) {\n    throw new Error('Incorrect data');\n  }\n  throw new Error('Incorrect data');\n}\n\nexport function decodeCBORData(data: string) {\n  const hexData = removeOpReturn(data);\n  const allegoryDataBuffer = Buffer.from(hexData, 'hex');\n  const allegoryDataArrayBuffer = allegoryDataBuffer.buffer.slice(\n    allegoryDataBuffer.byteOffset,\n    allegoryDataBuffer.byteOffset + allegoryDataBuffer.byteLength\n  );\n  try {\n    return CBOR.decode(allegoryDataArrayBuffer);\n  } catch (error) {\n    console.log(error);\n    throw error;\n  }\n}\n","import PouchDB from 'pouchdb-browser';\nimport MemoryAdapter from 'pouchdb-adapter-memory';\nimport pouchdbFind from 'pouchdb-find';\nimport CryptoJS from 'crypto-js';\nimport AES from 'crypto-js/aes';\n\nPouchDB.plugin(MemoryAdapter);\nPouchDB.plugin(pouchdbFind);\n\nlet profiles: any;\nlet db: any;\nlet credentials: any;\n\nexport const BIP32_EXTENDED_KEY = 'bip32ExtendedKey';\nexport const NUTXO_EXTENDED_KEY = 'nUTXOExtendedKey';\n\n/* Revisit all fn for try-catch error handling */\n\nconst get = async (db: any, key: string) => await db.get(key);\n\nconst set = async (db: any, key: string, value: any) => {\n  const doc: any = await db.get(key);\n  for (const prop in value) {\n    doc[prop] = value[prop];\n  }\n  await db.put(doc);\n};\n\nexport const init = async (dbName: string) => {\n  db = new PouchDB(`${dbName}`, {\n    revs_limit: 1,\n    auto_compaction: true,\n  });\n  credentials = new PouchDB('credentials', {\n    revs_limit: 1,\n    auto_compaction: true,\n    // adapter: 'memory',\n  });\n  await credentials.bulkDocs([\n    { _id: BIP32_EXTENDED_KEY, value: null },\n    { _id: NUTXO_EXTENDED_KEY, value: null },\n  ]);\n};\n\n/* Revisit required */\nexport const createProfile = async (\n  cryptedMnemonic: string,\n  profileName: string\n) => {\n  const newProfile = { cryptedMnemonic, name: profileName };\n  try {\n    const existingProfiles: any = await profiles.get('profiles');\n    if (\n      existingProfiles &&\n      existingProfiles.value &&\n      existingProfiles.value instanceof Array\n    ) {\n      existingProfiles.value = [...existingProfiles.value, newProfile];\n      await profiles.put(existingProfiles);\n    } else {\n      await profiles.put({\n        _id: 'profiles',\n        value: [newProfile],\n      });\n    }\n  } catch (error) {\n    await profiles.put({\n      _id: 'profiles',\n      value: [newProfile],\n    });\n  }\n};\n\n/* Revisit required */\nexport const updateProfile = async (\n  currentProfileName: string,\n  newProfileName: string\n) => {\n  try {\n    const existingProfiles: any = await profiles.get('profiles', {\n      revs: true,\n    });\n\n    const profileIndex = existingProfiles.value.findIndex(\n      (profile: any) => profile.name === currentProfileName\n    );\n\n    const profilesArray = existingProfiles.value;\n\n    profilesArray[profileIndex].name = newProfileName;\n\n    await profiles.put({\n      _id: 'profiles',\n      _rev: existingProfiles._rev,\n      value: profilesArray,\n    });\n  } catch (error) {\n    throw error;\n  }\n};\n\n/* Revisit required */\nexport const getProfiles = async () => {\n  try {\n    profiles = new PouchDB('Profiles', {\n      revs_limit: 1,\n      auto_compaction: true,\n    });\n    const existingProfiles: any = await profiles.get('profiles');\n    if (\n      existingProfiles &&\n      existingProfiles.value &&\n      existingProfiles.value instanceof Array\n    ) {\n      const profileNames = existingProfiles.value.map(\n        (existingProfile: any) => existingProfile\n      );\n      return profileNames;\n    } else {\n      return [];\n    }\n  } catch (error) {\n    return [];\n  }\n};\n\n/* Revisit required */\nexport const login = async (profile: string, password: string) => {\n  const existingProfiles = await getProfiles();\n  const selectedProfile = existingProfiles.find(\n    (existingProfile: { name: string }) => existingProfile.name === profile\n  );\n  if (selectedProfile) {\n    const bip39Mnemonic = AES.decrypt(\n      selectedProfile.cryptedMnemonic,\n      password\n    ).toString(CryptoJS.enc.Utf8);\n    if (bip39Mnemonic) {\n      return bip39Mnemonic;\n    } else {\n      throw new Error('Login error');\n    }\n  } else {\n    throw new Error(\"Account Doesn't exist\");\n  }\n};\n\nexport const getBip32ExtendedKey = async () => {\n  const bip32ExtendedKeyDoc: any = await get(credentials, BIP32_EXTENDED_KEY);\n  return bip32ExtendedKeyDoc.value;\n};\n\nexport const setBip32ExtendedKey = async (value: any) =>\n  await set(credentials, BIP32_EXTENDED_KEY, { value });\n\nexport const getNUTXOExtendedKey = async () => {\n  const nUTXOExtendedKeyDoc: any = await get(credentials, NUTXO_EXTENDED_KEY);\n  return nUTXOExtendedKeyDoc.value;\n};\n\nexport const setNUTXOExtendedKey = async (value: any) =>\n  await set(credentials, NUTXO_EXTENDED_KEY, { value });\n\nexport const getNUTXODerivedKeys = async () => {\n  const response = await db.allDocs({\n    include_docs: true,\n    startkey: 'nUTXOKey',\n    endkey: 'nUTXOKey\\ufff0',\n  });\n  if (response && response.rows.length > 0) {\n    const existingNUTXODerivedKeys = response.rows.map(\n      (row: { doc: any }) => row.doc\n    );\n    return { existingNUTXODerivedKeys };\n  } else {\n    return { existingNUTXODerivedKeys: [] };\n  }\n};\n\nexport const upsertNUTXODerivedKeys = async (keys: any) => {\n  if (keys.length > 0) {\n    const { existingNUTXODerivedKeys } = await getNUTXODerivedKeys();\n    let keyId = existingNUTXODerivedKeys.length - 1;\n    const docs = keys.map((key: any, index: number) => {\n      if (!key._id) {\n        keyId = keyId + 1;\n      }\n      return {\n        ...key,\n        _id: key._id ? key._id : `nUTXOKey-${String(keyId).padStart(20, '0')}`,\n      };\n    });\n    await db.bulkDocs(docs);\n  }\n};\n\nexport const getDerivedKeys = async () => {\n  const response = await db.allDocs({\n    include_docs: true,\n    startkey: 'key',\n    endkey: 'key\\ufff0',\n  });\n  if (response && response.rows.length > 0) {\n    const existingDerivedKeys = response.rows.map(\n      (row: { doc: any }) => row.doc\n    );\n    return { existingDerivedKeys };\n  } else {\n    return { existingDerivedKeys: [] };\n  }\n};\n\nexport const upsertDerivedKeys = async (keys: any) => {\n  if (keys.length > 0) {\n    const { existingDerivedKeys } = await getDerivedKeys();\n    let keyId = existingDerivedKeys.length - 1;\n    const docs = keys.map((key: any, index: number) => {\n      if (!key._id) {\n        keyId = keyId + 1;\n      }\n      return {\n        ...key,\n        _id: key._id ? key._id : `key-${String(keyId).padStart(20, '0')}`,\n      };\n    });\n    await db.bulkDocs(docs);\n  }\n};\n\nexport const getOutputs = async (options?: {\n  startkey?: string;\n  limit?: number;\n  diff?: boolean;\n}) => {\n  const response = await db.allDocs({\n    include_docs: true,\n    ...options,\n    startkey: options?.startkey || 'output',\n    endkey: 'output\\ufff0',\n    skip: options?.startkey ? 1 : false,\n  });\n  if (response && response.rows.length > 0) {\n    const nextOutputsCursor = response.rows[response.rows.length - 1].id;\n    const outputs = response.rows.map((row: { doc: any }) => row.doc);\n    return { nextOutputsCursor, outputs };\n  } else {\n    return { nextOutputsCursor: null, outputs: [] };\n  }\n};\n\nexport const markOutputAsUnspent = async (\n  inputs: [\n    {\n      outputTxHash: string;\n      outputIndex: number;\n    }\n  ]\n) => {\n  const markAsUnspentOutputs: any[] = [];\n  for (let index = 0; index < inputs.length; index++) {\n    const input = inputs[index];\n    await db.createIndex({\n      index: { fields: ['outputTxHash', 'outputIndex'] },\n    });\n    const outputDoc = await db.find({\n      selector: {\n        outputTxHash: { $eq: input.outputTxHash },\n        outputIndex: { $eq: input.outputIndex },\n      },\n    });\n    if (outputDoc.docs.length > 0) {\n      const unspentOutputs = outputDoc.docs.map((output: any) => {\n        return {\n          ...output,\n          isSpent: false,\n        };\n      });\n      markAsUnspentOutputs.push(...unspentOutputs);\n    }\n  }\n  await db.bulkDocs(markAsUnspentOutputs);\n};\n\nexport const upsertOutputs = async (outputs: any) => {\n  if (outputs.length > 0) {\n    const { outputs: existingOutputs } = await getOutputs();\n\n    if (existingOutputs.length > 0) {\n    } else {\n    }\n    let outputId = existingOutputs.length - 1;\n    const docs = outputs.map((output: any, index: number) => {\n      if (!output._id) {\n        outputId = outputId + 1;\n      }\n      return {\n        ...output,\n        isSpent: output.isSpent\n          ? output.isSpent\n          : output.spendInfo\n          ? true\n          : false,\n        _id: output._id\n          ? output._id\n          : `output-${String(outputId).padStart(20, '0')}`,\n      };\n    });\n    await db.bulkDocs(docs);\n  }\n};\n\n/* _rev change case */\nexport const updateOutputs = async (outputs: any) => {\n  const updateDoc = [];\n  for (let index = 0; index < outputs.length; index++) {\n    const element = outputs[index];\n    const outputDoc = await db.get(element._id);\n    updateDoc.push({ ...element, _rev: outputDoc._rev });\n  }\n  try {\n    const results = await db.bulkDocs(updateDoc);\n    results.forEach((result: { error: any }) => {\n      if (result.error) {\n        throw new Error('Error in updating outputs');\n      }\n    });\n  } catch (error) {\n    throw error;\n  }\n};\n\n/* No _id, _rev change case */\nexport const deleteOutputs = async (\n  outputs: [\n    {\n      outputTxHash: string;\n      outputIndex: number;\n    }\n  ]\n) => {\n  const deletedOutputs: any[] = [];\n  for (let index = 0; index < outputs.length; index++) {\n    const output = outputs[index];\n    await db.createIndex({\n      index: { fields: ['outputTxHash', 'outputIndex'] },\n    });\n    const outputDoc = await db.find({\n      selector: {\n        outputTxHash: { $eq: output.outputTxHash },\n        outputIndex: { $eq: output.outputIndex },\n      },\n    });\n    if (outputDoc.docs.length > 0) {\n      const deletedOutput = outputDoc.docs.map((output: any) => {\n        return {\n          ...output,\n          _deleted: true,\n        };\n      });\n      deletedOutputs.push(...deletedOutput);\n    }\n  }\n  await db.bulkDocs(deletedOutputs);\n};\n\nexport const isInOutputs = async (output: {\n  outputTxHash: string;\n  outputIndex: number;\n}) => {\n  await db.createIndex({\n    index: { fields: ['outputTxHash', 'outputIndex'] },\n  });\n  const outputDoc = await db.find({\n    selector: {\n      outputTxHash: { $eq: output.outputTxHash },\n      outputIndex: { $eq: output.outputIndex },\n    },\n  });\n  if (outputDoc.docs.length > 0) return true;\n  return false;\n};\n\nexport const getTransactions = async (options?: {\n  startkey?: string;\n  limit?: number;\n  diff?: boolean;\n}) => {\n  const response = await db.allDocs({\n    include_docs: true,\n    ...options,\n    descending: true,\n    endkey: 'transaction',\n    // endkey: 'transaction\\ufff0',\n    startkey: options?.startkey || 'transaction\\ufff0',\n    skip: options?.startkey ? 1 : false,\n  });\n  if (response && response.rows.length > 0) {\n    let nextTransactionCursor;\n    if (response.rows.length === options?.limit) {\n      nextTransactionCursor = response.rows[response.rows.length - 1].id;\n    } else {\n      nextTransactionCursor = null;\n    }\n    const transactions = response.rows.map((row: { doc: any }) => row.doc);\n    return { nextTransactionCursor, transactions };\n  } else {\n    return { nextTransactionCursor: null, transactions: [] };\n  }\n};\n\nexport const getTransactionsByConfirmations = async (options?: {\n  startkey?: string;\n  limit?: number;\n  diff?: boolean;\n}) => {\n  await db.createIndex({\n    index: { fields: ['confirmation'] },\n  });\n  const transactionDocs = await db.find({\n    selector: {\n      $and: [\n        { confirmation: { $lte: 10 } },\n        { confirmation: { $exists: true } },\n      ],\n    },\n  });\n  if (transactionDocs.docs.length > 0)\n    return { transactions: transactionDocs.docs };\n  return { transactions: [] };\n};\n\nexport const upsertTransactions = async (transactions: any[]) => {\n  if (transactions.length > 0) {\n    const { transactions: existingTransactions } = await getTransactions();\n    let txId = existingTransactions.length - 1;\n    const docs = transactions\n      .reverse()\n      .map((transaction: any, index: number) => {\n        if (!transaction._id) {\n          txId = txId + 1;\n        }\n        return {\n          ...transaction,\n          _id: transaction._id\n            ? transaction._id\n            : `transaction-${String(txId).padStart(20, '0')}`,\n        };\n      });\n    await db.bulkDocs(docs);\n  }\n};\n\n/* No _rev case */\nexport const deleteTransactions = async (transactions: any) => {\n  const updatedDoc = [];\n  for (let index = 0; index < transactions.length; index++) {\n    const transaction = transactions[index];\n    const transactionDoc = await db.get(transaction._id);\n    updatedDoc.push({\n      ...transaction,\n      _rev: transactionDoc._rev,\n      _deleted: true,\n    });\n  }\n  try {\n    const results = await db.bulkDocs(updatedDoc);\n    results.forEach((result: { error: any }) => {\n      if (result.error) {\n        throw new Error('Error in updating transactions');\n      }\n    });\n  } catch (error) {\n    throw error;\n  }\n};\n\nexport const markAddressesUsed = async (addresses: string[]) => {\n  if (addresses.length > 0) {\n    const { existingDerivedKeys } = await getDerivedKeys();\n    const matchedDerivedKeys = existingDerivedKeys.filter(\n      (key: any, index: number) => {\n        return addresses.includes(key.address);\n      }\n    );\n    const docs = matchedDerivedKeys.map((key: any, index: number) => {\n      return {\n        ...key,\n        isUsed: true,\n      };\n    });\n    await db.bulkDocs(docs);\n  }\n};\n\nexport const getUTXOs = async (options?: {\n  startkey?: string;\n  limit?: number;\n  diff?: boolean;\n}) => {\n  await db.createIndex({\n    index: { fields: ['isSpent', 'isNameOutpoint'] },\n  });\n  const outputDoc = await db.find({\n    selector: {\n      isSpent: { $eq: false },\n      isNameOutpoint: { $exists: false },\n    },\n  });\n  if (outputDoc.docs.length > 0) return { utxos: outputDoc.docs };\n  return { utxos: [] };\n};\n\nexport const getNUtxo = async (name: string) => {\n  await db.createIndex({\n    index: { fields: ['isSpent', 'name'] },\n  });\n  const outputDoc = await db.find({\n    selector: {\n      // isSpent: { $eq: false },\n      name: name,\n    },\n  });\n  if (outputDoc.docs.length > 0) return { nUTXOs: outputDoc.docs[0] };\n  return { nUTXOs: null };\n};\n\nexport const getUnregisteredName = async () => {\n  await db.createIndex({\n    index: { fields: ['isSpent', 'isNameOutpoint'] },\n  });\n  const outputDoc = await db.find({\n    selector: {\n      isSpent: { $eq: false },\n      isNameOutpoint: { $exists: true },\n    },\n  });\n  if (outputDoc.docs.length > 0) {\n    return { names: outputDoc.docs.map((doc: { name: string }) => doc.name) };\n  }\n  return { names: [] };\n};\n\nexport const destroy = async () => {\n  try {\n    await db.viewCleanup();\n    await credentials.destroy();\n    db = null;\n    credentials = null;\n    return true;\n  } catch (error) {\n    throw error;\n  }\n};\n","import { get } from './httpClient';\nimport Qs from 'qs';\n\nclass AddressAPI {\n  getOutputsByAddress = async (\n    address: string,\n    pagesize?: number,\n    cursor?: number\n  ) => {\n    try {\n      const { data } = await get(`address/${address}/outputs`, {\n        params: { pagesize, cursor },\n      });\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  getOutputsByAddresses = async (\n    addresses: string[],\n    pagesize?: number,\n    cursor?: number\n  ) => {\n    try {\n      const { data } = await get(`addresses/outputs`, {\n        params: {\n          address: addresses,\n          pagesize,\n          cursor,\n        },\n        paramsSerializer: (params) =>\n          Qs.stringify(params, { arrayFormat: 'repeat' }),\n      });\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  getUTXOsByAddress = async (\n    address: string,\n    pagesize?: number,\n    cursor?: number\n  ) => {\n    try {\n      const { data } = await get(`address/${address}/utxos`, {\n        params: { pagesize, cursor },\n      });\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  getUTXOsByAddresses = async (\n    addresses: string[],\n    pagesize?: number,\n    cursor?: number\n  ) => {\n    try {\n      const { data } = await get(`addresses/utxos`, {\n        params: {\n          address: addresses,\n          pagesize,\n          cursor,\n        },\n        paramsSerializer: (params) =>\n          Qs.stringify(params, { arrayFormat: 'repeat' }),\n      });\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n}\n\nexport const addressAPI = new AddressAPI();\n","import { get, post } from './httpClient';\nimport Qs from 'qs';\nclass TransactionAPI {\n  getTransactionByTxID = async (txId: string) => {\n    try {\n      const { data } = await get(`transaction/${txId}`);\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  getTransactionsByTxIDs = async (txIDs: string[]) => {\n    try {\n      const { data } = await get(`transactions`, {\n        params: {\n          id: txIDs,\n        },\n        paramsSerializer: (params) =>\n          Qs.stringify(params, { arrayFormat: 'repeat' }),\n      });\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  getRawTransactionByTxID = async (txID: string) => {\n    try {\n      const { data } = await get(`rawtransaction/${txID}`);\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  getRawTransactionsByTxIDs = async (txIDs: string[]) => {\n    try {\n      const { data } = await get(`rawtransactions`, {\n        params: {\n          id: txIDs,\n        },\n        paramsSerializer: (params) =>\n          Qs.stringify(params, { arrayFormat: 'repeat' }),\n      });\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  broadcastRawTransaction = async (hash: string) => {\n    try {\n      const { data } = await post(`relaytx`, {\n        rawTx: hash,\n      });\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  getSpendStatusByOutpoint = async (outpoint: string) => {\n    try {\n      const { data } = await get(`transaction/${outpoint}/index/0`);\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n}\n\nexport const transactionAPI = new TransactionAPI();\n","import { get } from './httpClient';\n\nclass ChainAPI {\n  getChainInfo = async () => {\n    try {\n      const { data } = await get(`chain/info`);\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  getBlockHeaders = async (startBlockHeight: number, pagesize?: number) => {\n    try {\n      const { data } = await get(`chain/headers`, {\n        params: {\n          startBlockHeight,\n          pagesize,\n        },\n      });\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n}\n\nexport const chainAPI = new ChainAPI();\n","import { bip32, Network, BIP32Interface } from 'bitcoinjs-lib';\nimport derivationPaths from './constants/derivationPaths';\nimport * as bip39 from 'bip39';\n\nclass Utils {\n  mnemonicToSeed = async (\n    bip39Mnemonic: string,\n    password?: string\n  ): Promise<Buffer> => {\n    return await bip39.mnemonicToSeed(bip39Mnemonic, password);\n  };\n\n  getSeedHex = (seed: Buffer) => {\n    return seed.toString('hex');\n  };\n\n  getBIP32RootKeyFromSeedHex = (\n    seed: string,\n    network?: Network\n  ): BIP32Interface => {\n    return bip32.fromBase58(seed, network);\n  };\n\n  getBIP32RootKeyBase58 = (bip32RootKey: BIP32Interface) => {\n    return bip32RootKey.toBase58();\n  };\n\n  getAccountExtendedPrivKey = (bip32ExtendedKey: BIP32Interface) => {\n    return bip32ExtendedKey.toBase58();\n  };\n\n  getAccountExtendedPubKey = (bip32ExtendedKey: any) => {\n    return bip32ExtendedKey.neutered().toBase58();\n  };\n\n  getDerivationPathAccount = (): string => {\n    const { purpose, coin, account } = derivationPaths.BITCOIN_SV.BIP44;\n    let path = 'm/';\n    path += purpose + \"'/\";\n    path += coin + \"'/\";\n    path += account + \"'/\";\n    return path;\n  };\n\n  getCodePoint(name: string) {\n    const nameCodePoints: number[] = [];\n    for (let i = 0; i < name.length; i++) {\n      nameCodePoints.push(name.codePointAt(i)!);\n    }\n    return nameCodePoints;\n  }\n\n  codePointToName = (codePoints: number[]) => {\n    if (codePoints && codePoints.length > 0) {\n      let name = '';\n      for (let i = 0; i < codePoints.length; i++) {\n        name += String.fromCodePoint(codePoints[i]);\n      }\n      return name;\n    }\n    return null;\n  };\n\n  // unique = (array, col) => [...new Set(array.map(() => col))];\n\n  // groupBy = (arr, col) => {\n  //   return arr.reduce((finalOutput, currVal) => {\n  //     if (!finalOutput[currVal[col]]) {\n  //       finalOutput[currVal[col]] = [];\n  //     }\n  //     finalOutput[currVal[col]].push(currVal);\n  //     return finalOutput;\n  //   }, {});\n  // };\n\n  // chunk = () => {};\n\n  arraysEqual(a: any[], b: any[]) {\n    if (a === b) return true;\n    if (a == null || b == null) return false;\n    if (a.length !== b.length) return false;\n\n    // If you don't care about the order of the elements inside\n    // the array, you should sort both arrays here.\n    // Please note that calling sort on an array will modify that array.\n    // you might want to clone your array first.\n\n    for (var i = 0; i < a.length; ++i) {\n      if (a[i] !== b[i]) return false;\n    }\n    return true;\n  }\n\n  satoshiToBSV = (satoshi: number) => {\n    if (satoshi) return satoshi / 100000000;\n    return 0;\n  };\n}\n\nexport default new Utils();\n","import {\n  Network,\n  bip32,\n  ECPair,\n  networks,\n  payments,\n  Psbt,\n  Transaction,\n} from 'bitcoinjs-lib';\nimport AES from 'crypto-js/aes';\nimport coinSelect from 'coinselect';\nimport faker from 'faker';\nimport * as bip39 from 'bip39';\nimport * as _ from 'lodash';\nimport { differenceInMinutes } from 'date-fns';\nimport {\n  decodeCBORData,\n  getAllegoryType,\n  ProducerAction,\n  Extension,\n  OwnerExtension,\n  ProducerExtension,\n} from './Allegory';\nimport * as Persist from './Persist';\nimport derivationPaths from './constants/derivationPaths';\nimport network from './constants/network';\nimport { addressAPI } from './AddressAPI';\nimport { transactionAPI } from './TransactionAPI';\nimport { chainAPI } from './ChainAPI';\nimport utils from './Utils';\nimport { post } from './httpClient';\n\nclass Wallet {\n  async _initWallet(bip39Mnemonic: string, password?: string) {\n    const seed = this._mnemonicToSeedSync(bip39Mnemonic, password);\n    const bip32RootKey = this._getBIP32RootKeyFromSeed(\n      seed,\n      network.BITCOIN_SV_REGTEST\n    );\n    const bip32ExtendedKey = this._getBIP32ExtendedKey(\n      derivationPaths.BITCOIN_SV_REGTEST.BIP44.derivationPath,\n      bip32RootKey\n    );\n    const nUTXOExtendedKey = this._getBIP32ExtendedKey(\n      derivationPaths.BITCOIN_SV_REGTEST.BIP44.nUTXODerivationPath,\n      bip32RootKey\n    );\n    await Persist.setBip32ExtendedKey(bip32ExtendedKey);\n    await Persist.setNUTXOExtendedKey(nUTXOExtendedKey);\n\n    const { existingDerivedKeys } = await Persist.getDerivedKeys();\n    const countOfUnusedKeys = this._countOfUnusedKeys(existingDerivedKeys);\n    if (countOfUnusedKeys < 20) {\n      let lastKeyIndex = -1;\n      if (existingDerivedKeys.length > 0) {\n        lastKeyIndex = existingDerivedKeys[\n          existingDerivedKeys.length - 1\n        ].indexText\n          .split('/')\n          .pop();\n      }\n      const { derivedKeys: newDerivedKeys } = await this.generateDerivedKeys(\n        bip32ExtendedKey,\n        derivationPaths.BITCOIN_SV_REGTEST.BIP44.derivationPath,\n        Number(lastKeyIndex) + 1,\n        20 - countOfUnusedKeys,\n        false\n      );\n      await Persist.upsertDerivedKeys(newDerivedKeys);\n    }\n\n    const { existingNUTXODerivedKeys } = await Persist.getNUTXODerivedKeys();\n    const countOfUnusedNUTXOKeys = this._countOfUnusedKeys(\n      existingNUTXODerivedKeys\n    );\n    if (countOfUnusedNUTXOKeys < 20) {\n      let lastKeyIndex = -1;\n      if (existingNUTXODerivedKeys.length > 0) {\n        lastKeyIndex = existingNUTXODerivedKeys[\n          existingNUTXODerivedKeys.length - 1\n        ].indexText\n          .split('/')\n          .pop();\n      }\n      const { derivedKeys: newDerivedKeys } = await this.generateDerivedKeys(\n        nUTXOExtendedKey,\n        derivationPaths.BITCOIN_SV_REGTEST.BIP44.nUTXODerivationPath,\n        Number(lastKeyIndex) + 1,\n        20 - countOfUnusedNUTXOKeys,\n        false\n      );\n      await Persist.upsertNUTXODerivedKeys(newDerivedKeys);\n    }\n  }\n\n  _mnemonicToSeedSync(bip39Mnemonic: string, password?: string): Buffer {\n    return bip39.mnemonicToSeedSync(bip39Mnemonic, password);\n  }\n\n  _getBIP32RootKeyFromSeed(seed: Buffer, network?: Network): string {\n    return bip32.fromSeed(seed, network).toBase58();\n  }\n\n  _getBIP32ExtendedKey(path: string, bip32RootKey: string): string {\n    if (!bip32RootKey) {\n      return bip32RootKey;\n    }\n    let extendedKey = bip32.fromBase58(\n      bip32RootKey,\n      network.BITCOIN_SV_REGTEST\n    );\n    const pathBits = path.split('/');\n    for (let i = 0; i < pathBits.length; i++) {\n      const bit = pathBits[i];\n      const index = parseInt(bit);\n      if (isNaN(index)) {\n        continue;\n      }\n      const hardened = bit[bit.length - 1] === \"'\";\n      if (hardened) {\n        extendedKey = extendedKey.deriveHardened(index);\n      } else {\n        extendedKey = extendedKey.derive(index);\n      }\n    }\n    return extendedKey.toBase58();\n  }\n\n  getBIP32ExtendedPrivKey = (bip32ExtendedKey: string) => {\n    const bip32Interface = bip32.fromBase58(\n      bip32ExtendedKey,\n      network.BITCOIN_SV_REGTEST\n    );\n    let xprvkeyB58 = 'NA';\n    if (!bip32Interface.isNeutered()) {\n      xprvkeyB58 = bip32Interface.toBase58();\n    }\n    return xprvkeyB58;\n  };\n\n  getBIP32ExtendedPubKey = (bip32ExtendedKey: string) => {\n    const bip32Interface = bip32.fromBase58(\n      bip32ExtendedKey,\n      network.BITCOIN_SV_REGTEST\n    );\n    return bip32Interface.neutered().toBase58();\n  };\n\n  _generateDerivedKeys(\n    bip32ExtendedKey: string,\n    derivationPath: string,\n    index: number,\n    useBip38?: boolean,\n    bip38password: string = '',\n    useHardenedAddresses?: boolean\n  ) {\n    const bip32Interface = bip32.fromBase58(\n      bip32ExtendedKey,\n      network.BITCOIN_SV_REGTEST\n    );\n    let key;\n    if (useHardenedAddresses) {\n      key = bip32Interface.deriveHardened(index);\n    } else {\n      key = bip32Interface.derive(index);\n    }\n    const useUncompressed = useBip38;\n    let keyPair = ECPair.fromPrivateKey(key.privateKey!, {\n      network: network.BITCOIN_SV_REGTEST,\n    });\n    if (useUncompressed) {\n      keyPair = ECPair.fromPrivateKey(key.privateKey!, {\n        compressed: false,\n        network: network.BITCOIN_SV_REGTEST,\n      });\n    }\n    const address = payments.p2pkh({\n      pubkey: keyPair.publicKey,\n      network: network.BITCOIN_SV_REGTEST,\n    }).address!;\n    let indexText = derivationPath + '/' + index;\n    if (useHardenedAddresses) {\n      indexText = indexText + \"'\";\n    }\n    return { indexText, address };\n  }\n\n  _getPrivKey(\n    bip32ExtendedKey: string,\n    index: number,\n    useBip38?: boolean,\n    bip38password: string = '',\n    useHardenedAddresses?: boolean\n  ): { privkey: string } {\n    const bip32Interface = bip32.fromBase58(\n      bip32ExtendedKey,\n      network.BITCOIN_SV_REGTEST\n    );\n    let key;\n    if (useHardenedAddresses) {\n      key = bip32Interface.deriveHardened(index);\n    } else {\n      key = bip32Interface.derive(index);\n    }\n    const useUncompressed = useBip38;\n    let keyPair = ECPair.fromPrivateKey(key.privateKey!, {\n      network: network.BITCOIN_SV_REGTEST,\n    });\n    if (useUncompressed) {\n      keyPair = ECPair.fromPrivateKey(key.privateKey!, {\n        compressed: false,\n        network: network.BITCOIN_SV_REGTEST,\n      });\n    }\n    // const address = payments.p2pkh({\n    //   pubkey: keyPair.publicKey,\n    //   network: network.BITCOIN_SV_REGTEST,\n    // }).address!;\n    const hasPrivkey = !key.isNeutered();\n    let privkey = '';\n    if (hasPrivkey) {\n      privkey = keyPair.toWIF();\n      // if (useBip38) {\n      //   privkey = bip38.encrypt(keyPair.privateKey!, false, bip38password);\n      // }\n    }\n    // const pubkey = keyPair.publicKey.toString('hex');\n    // let indexText =\n    //   derivationPaths.BITCOIN_SV_REGTEST.BIP44.derivationPath + '/' + index;\n    // if (useHardenedAddresses) {\n    //   indexText = indexText + \"'\";\n    // }\n    // if (index === 0) {\n    //   return {\n    //     privkey: 'cQmNC5DxFdWhEqmzeWZ1Gk62hmLTai8vs9fvRVz2KsxKd9fYJTWH',\n    //   };\n    // }\n    return { privkey };\n  }\n\n  async generateDerivedKeys(\n    bip32ExtendedKey: string,\n    derivationPath: string,\n    indexStart: number,\n    count: number,\n    useBip38: boolean,\n    bip38password?: string,\n    useHardenedAddresses?: boolean\n  ) {\n    const derivedKeys = [];\n    for (let i = indexStart; i < indexStart + count; i++) {\n      // if (i === 0) {\n      //   const derivedKey = { address: '', indexText: 'm/44/1/0/0/0' };\n      //   derivedKey.address = 'msWHgqiPB4dDe7MK455MvkNkixhCZsNKdy';\n      //   derivedKeys.push({ ...derivedKey, isUsed: false });\n      // } else {\n      const derivedKey = this._generateDerivedKeys(\n        bip32ExtendedKey,\n        derivationPath,\n        i,\n        useBip38,\n        bip38password,\n        useHardenedAddresses\n      );\n      derivedKeys.push({ ...derivedKey, isUsed: false });\n      // }\n    }\n    return { derivedKeys };\n  }\n\n  _getAddressesFromKeys(derivedKeys: any[]) {\n    return derivedKeys.map((key: { address: any }) => key.address);\n  }\n\n  _countOfUnusedKeys(keys: any[]) {\n    return keys.reduce((acc: number, currKey: { isUsed: boolean }) => {\n      if (!currKey.isUsed) {\n        acc = acc + 1;\n      }\n      return acc;\n    }, 0);\n  }\n\n  _removeDuplicate(outputs: any[]) {\n    const sortedOutputs = outputs.sort(\n      (output1: { blockHeight: number }, output2: { blockHeight: number }) => {\n        const a =\n          output1.blockHeight !== null ? output1.blockHeight : 999999999;\n        const b =\n          output2.blockHeight !== null ? output2.blockHeight : 999999999;\n        return b - a;\n      }\n    );\n    const unconfirmedOutputs = [];\n    for (let index = 0; index < sortedOutputs.length; index++) {\n      const output = sortedOutputs[index];\n      if (output.txIndex === null) {\n        unconfirmedOutputs.push(output);\n      } else {\n        break;\n      }\n    }\n    if (unconfirmedOutputs.length > 0) {\n      const duplicateOutputs = sortedOutputs.splice(\n        0,\n        unconfirmedOutputs.length * 2\n      );\n      const uniqueOutputs = duplicateOutputs.filter((element, index, self) => {\n        return (\n          index ===\n          self.findIndex(\n            (t) =>\n              t.outputTxHash === element.outputTxHash &&\n              t.outputIndex === element.outputIndex\n          )\n        );\n      });\n      return [...uniqueOutputs, ...sortedOutputs];\n    }\n    return sortedOutputs;\n  }\n\n  async processAllegoryTransactions(outputs: any[], transactions: any[]) {\n    const allegoryTransactions = transactions.filter((transaction) => {\n      if (\n        transaction.outputs.length > 0 &&\n        transaction.outputs[0].lockingScript.startsWith(\n          '006a0f416c6c65676f72792f416c6c506179'\n        )\n      ) {\n        return true;\n      }\n      return false;\n    });\n    const confirmedNamePurchaseTxs: any[] = [];\n    allegoryTransactions.forEach((allegoryTransaction) => {\n      const allegoryData = decodeCBORData(\n        allegoryTransaction.outputs[0].lockingScript\n      );\n      const allegory = getAllegoryType(allegoryData);\n      const { name, action } = allegory;\n      let producerExtensions: { codePoint: number; index: any }[] = [];\n      if (action instanceof ProducerAction) {\n        const producerAction = action as ProducerAction;\n        if (producerAction.extensions.length > 0) {\n          producerExtensions = producerAction.extensions.map(\n            (extension: Extension) => {\n              if (extension instanceof ProducerExtension) {\n                return {\n                  codePoint: extension.codePoint,\n                  index: (extension as ProducerExtension).producerOutputEx\n                    .producer.index,\n                };\n              } else {\n                return {\n                  codePoint: extension.codePoint,\n                  index: (extension as OwnerExtension).ownerOutputEx.owner\n                    .index,\n                };\n              }\n            }\n          );\n        }\n      }\n      const producerCodePoints = producerExtensions?.map(\n        ({ codePoint }) => codePoint\n      );\n      confirmedNamePurchaseTxs.push({\n        name: utils.codePointToName([...name, ...producerCodePoints]),\n        index:\n          producerExtensions.length > 0 ? producerExtensions[0].index : null,\n        tx: allegoryTransaction,\n      });\n    });\n    const validConfirmedNamePurchaseTxs: any[] = [];\n    for (let index = 0; index < confirmedNamePurchaseTxs.length; index++) {\n      const confirmedNamePurchaseTx = confirmedNamePurchaseTxs[index];\n      const {\n        name,\n        tx: { txId },\n      } = confirmedNamePurchaseTx;\n      if (name) {\n        try {\n          const { data } = await post('allegory/name-outpoint', {\n            name: utils.getCodePoint(name),\n            isProducer: false,\n          });\n          const {\n            forName,\n            isProducer,\n            outPoint: { opIndex, opTxHash },\n            script,\n          } = data;\n          if (utils.codePointToName(forName) === name && txId === opTxHash) {\n            validConfirmedNamePurchaseTxs.push(confirmedNamePurchaseTx);\n          }\n        } catch (error) {}\n      }\n    }\n    const updatedOutputs = outputs.map(\n      (output: { outputTxHash: any; outputIndex: any }) => {\n        const nameOutput = validConfirmedNamePurchaseTxs.find(\n          (validConfirmedNamePurchaseTx: { tx: any; index: any }) => {\n            return (\n              output.outputTxHash === validConfirmedNamePurchaseTx.tx.txId &&\n              output.outputIndex === validConfirmedNamePurchaseTx.index\n            );\n          }\n        );\n\n        if (nameOutput) {\n          return {\n            ...output,\n            name: nameOutput.name,\n            isNameOutpoint: true,\n          };\n        } else {\n          return output;\n        }\n      }\n    );\n    return { outputs: updatedOutputs };\n  }\n\n  async getTransactions(options?: {\n    startkey?: string;\n    limit?: number;\n    pageNo?: number;\n    diff?: boolean;\n  }) {\n    const { existingDerivedKeys } = await Persist.getDerivedKeys();\n    const { existingNUTXODerivedKeys } = await Persist.getNUTXODerivedKeys();\n    const keys = [...existingDerivedKeys, ...existingNUTXODerivedKeys];\n    if (keys.length > 0) {\n      const {\n        derivedKeys: newDerivedKeys,\n        nUTXODerivedKeys: newNUTXODerivedKeys,\n        diffOutputs: diffOutputsWithDuplicate,\n      } = await this._getOutputs(keys);\n      if (diffOutputsWithDuplicate.length > 0) {\n        const diffOutputs = this._removeDuplicate(diffOutputsWithDuplicate);\n        const newKeys = [...newDerivedKeys, ...newNUTXODerivedKeys];\n        /* FIX: A Tx can be in spendInfo, and it may not appear in getOutputs API */\n        const spentOutputs = diffOutputs.filter(\n          (output: { spendInfo: any }) => {\n            if (output.spendInfo) return true;\n            return false;\n          }\n        );\n        const outgoingTxIds: string[] = Array.from(\n          new Set(\n            spentOutputs.map(\n              (output: { spendInfo: { spendingTxId: any } }) =>\n                output.spendInfo.spendingTxId\n            )\n          )\n        );\n        const incomingTxIds: string[] = Array.from(\n          new Set(\n            diffOutputs.map(\n              (output: { outputTxHash: any }) => output.outputTxHash\n            )\n          )\n        );\n        const txIds: string[] = Array.from(\n          new Set([...incomingTxIds, ...outgoingTxIds])\n        );\n        const { txs } = await this._getTransactions(txIds);\n        const { chainInfo } = await chainAPI.getChainInfo();\n        if (chainInfo) {\n          const { chainTip } = chainInfo;\n          if (txs.length > 0) {\n            const sortedTx = txs.sort(\n              (tx1: { blockHeight: number }, tx2: { blockHeight: number }) => {\n                return tx2.blockHeight - tx1.blockHeight;\n              }\n            );\n            const transactions: {\n              txId: any;\n              inputs: any;\n              outputs: any;\n              confirmation?: number | null;\n            }[] = sortedTx.map(\n              (transaction: { txId?: any; tx?: any; blockHeight?: any }) => {\n                const {\n                  tx: { txInps, txOuts },\n                  blockHeight,\n                } = transaction;\n                const newTxInps = txInps.map(\n                  (input: {\n                    address: string;\n                    txInputIndex: number;\n                    value: number;\n                  }) => {\n                    const isMineAddress = newKeys.find(\n                      (derivedKey: { address: any }) =>\n                        derivedKey.address === input.address\n                    );\n                    const isNUTXOAddress = newNUTXODerivedKeys.find(\n                      (derivedKey: { address: any }) =>\n                        derivedKey.address === input.address\n                    );\n                    return {\n                      address: input.address,\n                      txInputIndex: input.txInputIndex,\n                      value: input.value,\n                      isMine: isMineAddress ? true : false,\n                      isNUTXO: isNUTXOAddress ? true : false,\n                    };\n                  }\n                );\n                const newTxOuts = txOuts.map(\n                  (output: {\n                    address: string;\n                    lockingScript: string;\n                    outputIndex: number;\n                    value: number;\n                  }) => {\n                    const isMineAddress = newKeys.find(\n                      (derivedKey: { address: any }) =>\n                        derivedKey.address === output.address\n                    );\n                    const isNUTXOAddress = newNUTXODerivedKeys.find(\n                      (derivedKey: { address: any }) =>\n                        derivedKey.address === output.address\n                    );\n                    return {\n                      address: output.address,\n                      lockingScript: output.lockingScript,\n                      outputIndex: output.outputIndex,\n                      value: output.value,\n                      isMine: isMineAddress ? true : false,\n                      isNUTXO: isNUTXOAddress ? true : false,\n                    };\n                  }\n                );\n                const newTransaction = {\n                  txId: transaction.txId,\n                  inputs: newTxInps,\n                  outputs: newTxOuts,\n                };\n                return {\n                  ...newTransaction,\n                  confirmation: blockHeight ? chainTip - blockHeight : null,\n                };\n              }\n            );\n            const {\n              outputs: newDiffOutputs,\n            } = await this.processAllegoryTransactions(\n              diffOutputs,\n              transactions\n            );\n            await Persist.upsertOutputs(newDiffOutputs);\n            await Persist.upsertTransactions(transactions);\n            await Persist.upsertDerivedKeys(newDerivedKeys);\n            await Persist.upsertNUTXODerivedKeys(newNUTXODerivedKeys);\n            if (options?.diff) {\n              return { transactions };\n            } else {\n              return await Persist.getTransactions(options);\n            }\n          } else {\n            throw new Error('Error in fetching transactions');\n          }\n        } else {\n          throw new Error('Error in fetching transactions');\n        }\n      } else {\n        if (options?.diff) {\n          return { transactions: [] };\n        } else {\n          return await Persist.getTransactions(options);\n        }\n      }\n    }\n    return { transactions: [] };\n  }\n\n  async _getTransactions(txIds: string[]) {\n    const chunkedTxIds = _.chunk(txIds, 20);\n    const data = await Promise.all(\n      chunkedTxIds.map(async (chunkedTxId) => {\n        return await transactionAPI.getTransactionsByTxIDs(chunkedTxId);\n      })\n    );\n    const transactions = data.map((element) => element.txs).flat();\n    return { txs: transactions };\n  }\n\n  async _getOutputs(\n    derivedKeys: any[],\n    prevDiffOutputs: any[] = [],\n    prevKeys: any[] = []\n  ): Promise<any> {\n    const chunkedUsedDerivedKeys = _.chunk(derivedKeys, 20);\n    const outputsByAddresses = await Promise.all(\n      chunkedUsedDerivedKeys.map(async (chunkedUsedDerivedKey) => {\n        return await this._getOutputsByAddresses(chunkedUsedDerivedKey);\n      })\n    );\n    const diffOutputs = outputsByAddresses.flat();\n    const updatedKeys = derivedKeys.map(\n      (key: { address: string; indexText: string; isUsed: boolean }) => {\n        if (!key.isUsed) {\n          const found = diffOutputs.some(\n            (output: { address: any }) => output.address === key.address\n          );\n          return { ...key, isUsed: found };\n        }\n        return key;\n      }\n    );\n    const newDiffOutputs = [...prevDiffOutputs, ...diffOutputs];\n    const newKeys = [...prevKeys, ...updatedKeys];\n    const walletKeys = newKeys.filter((key: { indexText: string }) => {\n      return key.indexText.startsWith(\n        derivationPaths.BITCOIN_SV_REGTEST.BIP44.derivationPath\n      );\n    });\n    const nUTXOKeys = newKeys.filter((key: { indexText: string }) => {\n      return key.indexText.startsWith(\n        derivationPaths.BITCOIN_SV_REGTEST.BIP44.nUTXODerivationPath\n      );\n    });\n    const countOfUnusedKeys = this._countOfUnusedKeys(walletKeys);\n    const countOfUnusedNUTXOKeys = this._countOfUnusedKeys(nUTXOKeys);\n    if (countOfUnusedKeys < 20 || countOfUnusedNUTXOKeys < 20) {\n      const bip32ExtendedKey = await Persist.getBip32ExtendedKey();\n      const lastKeyIndex = walletKeys[walletKeys.length - 1].indexText\n        .split('/')\n        .pop();\n\n      const { derivedKeys: nextDerivedKeys } = await this.generateDerivedKeys(\n        bip32ExtendedKey,\n        derivationPaths.BITCOIN_SV_REGTEST.BIP44.derivationPath,\n        Number(lastKeyIndex) + 1,\n        20 - countOfUnusedKeys,\n        false\n      );\n\n      const nUTXOExtendedKey = await Persist.getNUTXOExtendedKey();\n      const lastNUTXOKeyIndex = nUTXOKeys[nUTXOKeys.length - 1].indexText\n        .split('/')\n        .pop();\n      const {\n        derivedKeys: nextNUTXODerivedKeys,\n      } = await this.generateDerivedKeys(\n        nUTXOExtendedKey,\n        derivationPaths.BITCOIN_SV_REGTEST.BIP44.nUTXODerivationPath,\n        Number(lastNUTXOKeyIndex) + 1,\n        20 - countOfUnusedNUTXOKeys,\n        false\n      );\n\n      const nextKeys = [...nextDerivedKeys, ...nextNUTXODerivedKeys];\n\n      return await this._getOutputs(nextKeys, newDiffOutputs, newKeys);\n    } else {\n      return {\n        diffOutputs: newDiffOutputs,\n        derivedKeys: walletKeys,\n        nUTXODerivedKeys: nUTXOKeys,\n      };\n    }\n  }\n\n  async _getOutputsByAddresses(\n    keys: any[],\n    prevOutputs: any[] = [],\n    nextCursor?: number\n  ): Promise<any> {\n    const addresses = this._getAddressesFromKeys(keys);\n    const data: {\n      outputs: any[];\n      nextCursor: number;\n    } = await addressAPI.getOutputsByAddresses(addresses, 100, nextCursor);\n    const { outputs } = await Persist.getOutputs();\n    if (outputs.length > 0) {\n      const diffOutputs = await this._getDiffOutputs(data.outputs);\n      if (diffOutputs.length === data.outputs.length) {\n        const outputs = [...prevOutputs, ...diffOutputs];\n        if (data.nextCursor) {\n          return await this._getOutputsByAddresses(\n            keys,\n            outputs,\n            data.nextCursor\n          );\n        } else {\n          return outputs;\n        }\n      } else {\n        return [...prevOutputs, ...diffOutputs];\n      }\n    } else {\n      const outputs = [...prevOutputs, ...data.outputs];\n      if (data.nextCursor) {\n        return await this._getOutputsByAddresses(\n          keys,\n          outputs,\n          data.nextCursor\n        );\n      } else {\n        return outputs;\n      }\n    }\n  }\n\n  async _getDiffOutputs(outputs: any) {\n    const newOutputs: any[] = [];\n    for (let index = 0; index < outputs.length; index++) {\n      if (!(await Persist.isInOutputs(outputs[index]))) {\n        newOutputs.push(outputs[index]);\n      } else {\n        return newOutputs;\n      }\n    }\n    return newOutputs;\n  }\n\n  async getUnusedNUTXOAddress() {\n    const { existingNUTXODerivedKeys } = await Persist.getNUTXODerivedKeys();\n    const unusedNUTXODerivedKeys = existingNUTXODerivedKeys\n      .filter(\n        (existingDerivedKey: { isUsed: any }) =>\n          existingDerivedKey.isUsed === false\n      )\n      .map(\n        ({ indexText, address }: { indexText: string; address: string }) =>\n          address\n      );\n    return unusedNUTXODerivedKeys.find(Boolean);\n  }\n\n  async _getKeys(addresses: string[]): Promise<object[]> {\n    const { existingDerivedKeys } = await Persist.getDerivedKeys();\n    const { existingNUTXODerivedKeys } = await Persist.getNUTXODerivedKeys();\n    const keys = [...existingDerivedKeys, ...existingNUTXODerivedKeys];\n    const bip32ExtendedKey = await Persist.getBip32ExtendedKey();\n    const nUTXOExtendedKey = await Persist.getNUTXOExtendedKey();\n\n    return addresses.map((address) => {\n      const derivedKey = keys.find(\n        (derivedKey: { address: string }) => derivedKey.address === address\n      );\n      let extendedKey;\n      if (\n        derivedKey.indexText.startsWith(\n          derivationPaths.BITCOIN_SV_REGTEST.BIP44.derivationPath\n        )\n      ) {\n        extendedKey = bip32ExtendedKey;\n      } else {\n        extendedKey = nUTXOExtendedKey;\n      }\n      const KeyIndex = derivedKey.indexText.split('/').pop();\n      const { privkey } = this._getPrivKey(\n        extendedKey,\n        Number(KeyIndex),\n        false\n      );\n      return ECPair.fromWIF(privkey, networks.regtest);\n    });\n  }\n\n  async updateTransactionsConfirmations() {\n    const { transactions } = await Persist.getTransactionsByConfirmations();\n    const txIds = transactions.map((tx: { txId: any }) => tx.txId);\n    if (txIds.length > 0) {\n      const { txs } = await this._getTransactions(txIds);\n      if (txs.length > 0) {\n        const { chainInfo } = await chainAPI.getChainInfo();\n        if (chainInfo) {\n          const { chainTip } = chainInfo;\n          const txsWithConfirmation = txs.map(\n            (transaction: { blockHeight?: any; txId: string }) => {\n              const { blockHeight } = transaction;\n              return {\n                ...transaction,\n                confirmation: blockHeight ? chainTip - blockHeight : null,\n              };\n            }\n          );\n\n          const updatedTransactions: any[] = [];\n          const deletedTransactions: any[] = [];\n          const unconfirmedTransactions: any[] = [];\n          transactions.forEach(\n            (transaction: { txId: string; confirmation: number | null }) => {\n              const matchedTxWithConfirmation = txsWithConfirmation.find(\n                (tx: { txId: string; confirmation: number | null }) =>\n                  tx.txId === transaction.txId\n              );\n              if (\n                matchedTxWithConfirmation &&\n                matchedTxWithConfirmation.confirmation !==\n                  transaction.confirmation\n              ) {\n                updatedTransactions.push({\n                  ...transaction,\n                  confirmation: matchedTxWithConfirmation.confirmation,\n                });\n              } else if (transaction.confirmation === null) {\n                unconfirmedTransactions.push({\n                  ...transaction,\n                });\n              }\n            }\n          );\n          await Persist.upsertTransactions(updatedTransactions);\n\n          if (unconfirmedTransactions.length > 0) {\n            for (\n              let index = 0;\n              index < unconfirmedTransactions.length;\n              index++\n            ) {\n              const unconfirmedTransaction = unconfirmedTransactions[index];\n              const diffInMinutes = differenceInMinutes(\n                new Date(),\n                Date.parse(unconfirmedTransaction.createdAt)\n              );\n              if (diffInMinutes > 30) {\n                // make inputs of the tx as unspent\n                const unspentOutputs = unconfirmedTransaction.inputs.map(\n                  (input: { outputTxHash: string; txInputIndex: number }) => {\n                    return {\n                      outputTxHash: input.outputTxHash,\n                      outputIndex: input.txInputIndex,\n                    };\n                  }\n                );\n                await Persist.markOutputAsUnspent(unspentOutputs);\n\n                // delete own outputs of this tx\n                const ownOutputs = unconfirmedTransaction.outputs.filter(\n                  (output: { isMine: boolean }) => output.isMine === true\n                );\n                const deletedOutputs = ownOutputs.map(\n                  (output: { outputIndex: number }) => {\n                    return {\n                      outputTxHash: unconfirmedTransaction.txId,\n                      outputIndex: output.outputIndex,\n                    };\n                  }\n                );\n                await Persist.deleteOutputs(deletedOutputs);\n\n                // delete transaction\n                deletedTransactions.push(unconfirmedTransaction);\n                await Persist.deleteTransactions([unconfirmedTransaction]);\n              }\n            }\n            return {\n              updatedTransactions,\n              deletedTransactions,\n            };\n          }\n          return { updatedTransactions, deletedTransactions };\n        }\n      }\n    }\n    return { updatedTransactions: [], deletedTransactions: [] };\n  }\n\n  async relayTx(\n    psbt: Psbt,\n    transaction: Transaction,\n    inputs: any[],\n    ownOutputs: any[]\n  ) {\n    const transactionHex = transaction.toHex();\n    const base64 = Buffer.from(transactionHex, 'hex').toString('base64');\n    const { txBroadcast } = await transactionAPI.broadcastRawTransaction(\n      base64\n    );\n    if (txBroadcast) {\n      const spentUtxos = inputs.map((input: any) => ({\n        ...input,\n        isSpent: true,\n      }));\n      const changeOutputs = ownOutputs.map(\n        (ownOutput: { address: string }, index) => {\n          const transactionOutput = transaction.outs.find((output, index) => {\n            if (\n              !Buffer.from(output.script)\n                .toString('hex')\n                .startsWith('006a0f416c6c65676f72792f416c6c506179')\n            ) {\n              const p2pkh = payments.p2pkh({\n                output: output.script,\n                network: network.BITCOIN_SV_REGTEST,\n              });\n\n              return ownOutput.address === p2pkh.address!;\n            }\n            return false;\n          });\n          const transactionIndex = transaction.outs.findIndex(\n            (output, index) => {\n              if (\n                !Buffer.from(output.script)\n                  .toString('hex')\n                  .startsWith('006a0f416c6c65676f72792f416c6c506179')\n              ) {\n                const p2pkh = payments.p2pkh({\n                  output: output.script,\n                  network: network.BITCOIN_SV_REGTEST,\n                });\n\n                return ownOutput.address === p2pkh.address!;\n              }\n              return false;\n            }\n          );\n\n          return {\n            address: ownOutput.address,\n            isSpent: false,\n            outputIndex: transactionIndex,\n            outputTxHash: transaction.getId(),\n            value: transactionOutput?.value,\n          };\n        }\n      );\n      const unconfirmedTransaction = {\n        txId: transaction.getId(),\n        inputs: transaction.ins.map((input, index) => {\n          const p2pkh = payments.p2pkh({\n            input: input.script,\n            network: network.BITCOIN_SV_REGTEST,\n          });\n          const isMineInput = inputs.find(\n            (inp: { outputTxHash: string; outputIndex: number }) => {\n              return (\n                inp.outputTxHash ===\n                  Buffer.from(input.hash).reverse().toString('hex') &&\n                inp.outputIndex === input.index\n              );\n            }\n          );\n          return {\n            address: p2pkh.address!,\n            isMine: isMineInput ? true : false,\n            isNUTXO: isMineInput && isMineInput.isNameOutpoint ? true : false,\n            txInputIndex: input.index,\n            outputTxHash: Buffer.from(input.hash).reverse().toString('hex'),\n            value: psbt.data.inputs[index].witnessUtxo?.value,\n          };\n        }),\n        outputs: transaction.outs.map((output, index) => {\n          if (\n            !Buffer.from(output.script)\n              .toString('hex')\n              .startsWith('006a0f416c6c65676f72792f416c6c506179')\n          ) {\n            const p2pkh = payments.p2pkh({\n              output: output.script,\n              network: network.BITCOIN_SV_REGTEST,\n            });\n            const isMineOutput = ownOutputs.find(\n              (ownOutput: { address: string }) => {\n                return ownOutput.address === p2pkh.address!;\n              }\n            );\n            return {\n              address: p2pkh.address!,\n              isMine: isMineOutput ? true : false,\n              isNUTXO:\n                isMineOutput && isMineOutput.type === 'nUTXO' ? true : false,\n              lockingScript: Buffer.from(output.script).toString('hex'),\n              outputIndex: index,\n              value: output.value,\n            };\n          } else {\n            return {\n              address: null,\n              isMine: false,\n              isNUTXO: false,\n              lockingScript: Buffer.from(output.script).toString('hex'),\n              outputIndex: index,\n              value: output.value,\n            };\n          }\n        }),\n        confirmation: null,\n        createdAt: new Date(),\n      };\n      const { outputs } = await this.processAllegoryTransactions(\n        changeOutputs,\n        [unconfirmedTransaction]\n      );\n      await this.markAddressesUsed(ownOutputs.map(({ address }) => address));\n      await Persist.upsertOutputs(spentUtxos);\n      await Persist.upsertOutputs(outputs);\n      await Persist.upsertTransactions([unconfirmedTransaction]);\n      return { transaction: unconfirmedTransaction, txBroadcast };\n    }\n    throw new Error('Broadcast failed');\n  }\n\n  async _createSendTransaction(utxos: any[], targets: any[], feeRate: number) {\n    try {\n      // let feeRate = 5; // satoshis per byte\n      // if (transactionFee === 0) {\n      //   feeRate = 0;\n      // }\n      let { inputs, outputs } = coinSelect(utxos, targets, feeRate);\n      if (!inputs || !outputs) throw new Error('Empty inputs or outputs');\n      // if (transactionFee !== fee) {\n      //   const changeOutputs = outputs.filter((output: { address: any }) => {\n      //     if (!output.address) return true;\n      //     return false;\n      //   });\n      //   const diffFee = fee - transactionFee;\n      //   if (changeOutputs.length > 0) {\n      //     changeOutputs[0].value = Number(changeOutputs[0].value) + diffFee;\n      //   }\n      // }\n\n      const psbt = new Psbt({\n        network: network.BITCOIN_SV_REGTEST,\n        forkCoin: 'bch',\n      });\n      psbt.setVersion(1);\n      inputs.forEach(\n        (input: {\n          outputTxHash: any;\n          outputIndex: any;\n          address: string;\n          value: number;\n        }) => {\n          const p2pkh = payments.p2pkh({\n            address: input.address,\n            network: network.BITCOIN_SV_REGTEST,\n          });\n          psbt.addInput({\n            hash: input.outputTxHash,\n            index: input.outputIndex,\n            witnessUtxo: {\n              script: p2pkh.output!,\n              value: input.value,\n            },\n          });\n        }\n      );\n      const usedAddresses: any[] = [];\n      for (let index = 0; index < outputs.length; index++) {\n        const output = outputs[index];\n        if (!output.address) {\n          const { unusedAddresses } = await this.getUnusedAddresses({\n            excludeAddresses: usedAddresses,\n          });\n          const address = unusedAddresses[0];\n          usedAddresses.push({ type: '', title: '', address });\n          output.address = address;\n        }\n        psbt.addOutput({\n          address: output.address,\n          value: output.value,\n        });\n      }\n      const addresses = inputs.map(\n        (input: { address: string }) => input.address\n      );\n      const keys: object[] = await this._getKeys(addresses);\n      keys.forEach((key: any, i) => {\n        psbt.signInput(i, key);\n      });\n      psbt.validateSignaturesOfAllInputs();\n      psbt.finalizeAllInputs();\n      const transaction = psbt.extractTransaction(true);\n      return await this.relayTx(psbt, transaction, inputs, usedAddresses);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async createSendTransaction(\n    receiverAddress: string,\n    amountInSatoshi: number,\n    feeRate: number\n  ) {\n    const { utxos } = await Persist.getUTXOs();\n    const targets = [\n      { address: receiverAddress, value: Number(amountInSatoshi) },\n    ];\n    return await this._createSendTransaction(utxos, targets, feeRate);\n  }\n\n  async getTransactionFee(\n    receiverAddress: string,\n    amountInSatoshi: number,\n    feeRate: number\n  ) {\n    try {\n      const { utxos } = await Persist.getUTXOs();\n      const targets = [\n        { address: receiverAddress, value: Number(amountInSatoshi) },\n      ];\n      let { fee } = coinSelect(utxos, targets, feeRate);\n      // if (!inputs) throw new Error('Not sufficient funds');\n      // if (!outputs) throw new Error('No Receiver specified');\n      return fee;\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async getBalance() {\n    const { outputs } = await Persist.getOutputs();\n    const balance = outputs.reduce((acc: number, currOutput: any) => {\n      if (!currOutput.isSpent) {\n        acc = acc + currOutput.value;\n      }\n      return acc;\n    }, 0);\n    return { balance };\n  }\n\n  generateMnemonic(\n    strength?: number,\n    rng?: (size: number) => Buffer,\n    wordlist?: string[]\n  ): string {\n    return bip39.generateMnemonic(strength, rng, wordlist);\n  }\n\n  async getUsedAddresses() {\n    const { outputs } = await Persist.getOutputs();\n    const outputsGroupedByAddress = _.groupBy(outputs, (output) => {\n      return output.address;\n    });\n    const usedAddresses: {\n      address: string;\n      incomingBalance: number;\n      outgoingBalance: number;\n      currentBalance: number;\n      lastTransaction: any;\n    }[] = [];\n    for (const [address, outputs] of Object.entries(outputsGroupedByAddress)) {\n      const currentBalance = outputs.reduce((acc: number, currOutput: any) => {\n        if (!currOutput.spendInfo) {\n          acc = acc + currOutput.value;\n        }\n        return acc;\n      }, 0);\n      let incomingBalance = 0;\n      let outgoingBalance = 0;\n      outputs.forEach((output) => {\n        if (output.spendInfo) {\n          outgoingBalance = outgoingBalance + output.value;\n        }\n        incomingBalance = incomingBalance + output.value;\n      });\n      usedAddresses.push({\n        address,\n        incomingBalance,\n        outgoingBalance,\n        currentBalance,\n        lastTransaction: outputs[0].address,\n      });\n    }\n    return {\n      usedAddresses,\n    };\n  }\n\n  async getUnusedAddresses(options?: {\n    excludeAddresses?: string[];\n    count?: number;\n  }): Promise<{ unusedAddresses: any[] }> {\n    const { existingDerivedKeys } = await Persist.getDerivedKeys();\n    const unusedAddresses = existingDerivedKeys\n      .filter(\n        (existingDerivedKey: { isUsed: any }) =>\n          existingDerivedKey.isUsed === false\n      )\n      .map(({ address }: { address: string }) => address);\n    if (options?.excludeAddresses) {\n      const filteredUnusedAddresses = unusedAddresses.filter(\n        (unusedAddress: string) => {\n          return !options.excludeAddresses?.includes(unusedAddress);\n        }\n      );\n      if (options?.count) {\n        return {\n          unusedAddresses: filteredUnusedAddresses.slice(0, options.count),\n        };\n      } else {\n        return {\n          unusedAddresses: filteredUnusedAddresses.slice(0, 1),\n        };\n      }\n    }\n    if (options?.count) {\n      return {\n        unusedAddresses: unusedAddresses.slice(0, options.count),\n      };\n    }\n    return {\n      unusedAddresses: unusedAddresses.slice(0, 1),\n    };\n  }\n\n  async markAddressesUsed(addresses: string[]) {\n    await Persist.markAddressesUsed(addresses);\n  }\n\n  async login(profileId: string, password: string) {\n    try {\n      const bip39Mnemonic = await Persist.login(profileId, password);\n      await Persist.init(profileId);\n      await this._initWallet(bip39Mnemonic);\n      return { profile: profileId };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async createProfile(bip39Mnemonic: string, password: string) {\n    const cryptedText = AES.encrypt(bip39Mnemonic, password).toString();\n    const profileName = faker.name.firstName();\n    localStorage.setItem('currentprofile', profileName);\n    try {\n      await Persist.createProfile(cryptedText, profileName);\n      return { profile: profileName };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async updateProfileName(currentProfileName: string, newProfileName: string) {\n    try {\n      await Persist.updateProfile(currentProfileName, newProfileName);\n      return { profile: newProfileName };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async getProfiles() {\n    return { profiles: await Persist.getProfiles() };\n  }\n\n  async getUnregisteredName() {\n    return await Persist.getUnregisteredName();\n  }\n\n  async logout() {\n    return await Persist.destroy();\n  }\n\n  async runScript() {\n    const targets = [\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n      { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\n    ];\n    // const { utxos } = await Persist.getUTXOs();\n    // const feeRate = 5;\n    // await this._createSendTransaction(utxos, targets, feeRate);\n    const keys: any[] = await this._getKeys([\n      'mmFXRtUtKN9znnF9DFgQqvKP5TBHZmgmym',\n    ]);\n    console.log(keys[0].privateKey.toString('hex'));\n    // const { utxos } = await Persist.getUTXOs();\n    // const balance = utxos.reduce((acc: number, currOutput: any) => {\n    //   if (!currOutput.isSpent) {\n    //     acc = acc + currOutput.value;\n    //   }\n    //   return acc;\n    // }, 0);\n  }\n}\n\nexport default new Wallet();\n","import sha256 from 'crypto-js/sha256';\nimport coinSelect from 'coinselect';\nimport { Psbt, payments } from 'bitcoinjs-lib';\nimport { decodeCBORData, getAllegoryType, OwnerAction } from './Allegory';\nimport wallet from './Wallet';\nimport utils from './Utils';\nimport { post } from './httpClient';\nimport * as Persist from './Persist';\nimport { transactionAPI } from './TransactionAPI';\nimport Config from './Config.json';\nimport network from './constants/network';\n\nclass Allpay {\n  async buyName(data: {\n    host: string;\n    port: number;\n    name: number[];\n    priceInSatoshi: number;\n    isProducer: boolean;\n  }) {\n    try {\n      const { host, port, name, isProducer } = data;\n      const priceInSatoshi = 1000000;\n      const feeRate = 0;\n      const { utxos } = await Persist.getUTXOs();\n      const targets = [{ value: Number(priceInSatoshi) }];\n      let { inputs, outputs } = coinSelect(utxos, targets, feeRate);\n      if (!inputs || !outputs) throw new Error('Empty inputs or outputs');\n      const paymentInputs = inputs.map((input: any) => {\n        return [\n          {\n            opTxHash: input.outputTxHash,\n            opIndex: input.outputIndex,\n          },\n          input.value,\n        ];\n      });\n      const outputOwner = await wallet.getUnusedNUTXOAddress();\n      const { unusedAddresses } = await wallet.getUnusedAddresses();\n      const outputChange = unusedAddresses[0];\n      if (outputOwner && outputChange) {\n        const {\n          data: { psaTx: psaBase64 },\n        } = await post(\n          'partialsign',\n          {\n            paymentInputs,\n            name: [name, isProducer],\n            outputOwner,\n            outputChange,\n          },\n          {\n            baseURL: `https://${host}:${port}/v1`,\n          }\n        );\n        const { psbt } = await this.decodeTransaction(psaBase64, inputs);\n        // const snv = await this.verifyRootTx({ psbt });\n        const ownOutputs = [\n          { type: 'nUTXO', title: 'Name UTXO', address: outputOwner },\n          { type: '', title: '', address: outputChange },\n        ];\n        return {\n          psbt,\n          outpoint: { name, isProducer },\n          inputs,\n          ownOutputs,\n          snv: true,\n        };\n      } else {\n        throw new Error('Error configuring input params');\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async decodeTransaction(\n    psaBase64: string,\n    inputs: any[],\n    addFunding?: boolean\n  ) {\n    const partiallySignTransaction = JSON.parse(\n      Buffer.from(psaBase64, 'base64').toString()\n    );\n    try {\n      const psbt = new Psbt({\n        network: network.BITCOIN_SV_REGTEST,\n        forkCoin: 'bch',\n      });\n      psbt.setVersion(1);\n      partiallySignTransaction.ins.forEach(\n        (input: {\n          outpoint: { hash: string; index: number };\n          sequence: number;\n          script: string;\n          value: number;\n        }) => {\n          if (input.script) {\n            const p2pkh = payments.p2pkh({\n              input: Buffer.from(input.script, 'hex'),\n              network: network.BITCOIN_SV_REGTEST,\n            });\n            psbt.addInput({\n              hash: input.outpoint.hash,\n              index: input.outpoint.index,\n              sequence: input.sequence,\n              witnessUtxo: {\n                script: p2pkh.output!,\n                value: input.value,\n              },\n            });\n          } else {\n            const utxoInput = inputs.find((inp) => {\n              return (\n                inp.outputTxHash === input.outpoint.hash &&\n                inp.outputIndex === input.outpoint.index\n              );\n            });\n            if (utxoInput) {\n              const p2pkh = payments.p2pkh({\n                address: utxoInput.address,\n                network: network.BITCOIN_SV_REGTEST,\n              });\n              psbt.addInput({\n                hash: input.outpoint.hash,\n                index: input.outpoint.index,\n                sequence: input.sequence,\n                witnessUtxo: {\n                  script: p2pkh.output!,\n                  value: utxoInput.value,\n                },\n              });\n            } else {\n              throw new Error('Error in setting psbt inputs');\n            }\n          }\n        }\n      );\n      let fundingInputs: any[] = [];\n      const ownOutputs: { type: string; title: ''; address: string }[] = [];\n      if (addFunding) {\n        const { utxos } = await Persist.getUTXOs();\n        const feeRate = 5000;\n        const amountInSatoshi = 10000;\n        const targets = [{ value: Number(amountInSatoshi) }];\n        const { inputs, outputs } = coinSelect(utxos, targets, feeRate);\n        fundingInputs = inputs;\n        inputs.forEach(\n          (input: {\n            outputTxHash: any;\n            outputIndex: any;\n            address: string;\n            value: number;\n          }) => {\n            const p2pkh = payments.p2pkh({\n              address: input.address,\n              network: network.BITCOIN_SV_REGTEST,\n            });\n            psbt.addInput({\n              hash: input.outputTxHash,\n              index: input.outputIndex,\n              witnessUtxo: {\n                script: p2pkh.output!,\n                value: input.value,\n              },\n            });\n          }\n        );\n\n        partiallySignTransaction.outs.forEach(\n          (output: { script: any; value: any }, index: number) => {\n            psbt.addOutput({\n              script: Buffer.from(output.script, 'hex'),\n              value: output.value,\n            });\n          }\n        );\n\n        const usedAddresses: string[] = [];\n        for (let index = 0; index < outputs.length; index++) {\n          const output = outputs[index];\n          if (!output.address) {\n            const { unusedAddresses } = await wallet.getUnusedAddresses({\n              excludeAddresses: usedAddresses,\n            });\n            const address = unusedAddresses[0];\n            usedAddresses.push(address);\n            output.address = address;\n            ownOutputs.push({ type: '', title: '', address });\n          }\n          psbt.addOutput({\n            address: output.address,\n            value: output.value,\n          });\n        }\n      } else {\n        partiallySignTransaction.outs.forEach(\n          (output: { script: any; value: any }, index: number) => {\n            psbt.addOutput({\n              script: Buffer.from(output.script, 'hex'),\n              value: output.value,\n            });\n          }\n        );\n      }\n      partiallySignTransaction.ins.forEach(\n        (input: { script: string }, index: number) => {\n          if (input.script) {\n            const p2pkh = payments.p2pkh({\n              input: Buffer.from(input.script, 'hex'),\n              network: network.BITCOIN_SV_REGTEST,\n            });\n            psbt.updateInput(index, {\n              partialSig: [\n                {\n                  pubkey: p2pkh.pubkey!,\n                  signature: p2pkh.signature!,\n                },\n              ],\n            });\n          }\n        }\n      );\n      return { psbt, fundingInputs, ownOutputs };\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async signRelayTransaction({\n    psbtHex,\n    inputs,\n    ownOutputs,\n  }: {\n    psbtHex: string;\n    inputs: any[];\n    ownOutputs: any[];\n  }) {\n    const psbt: Psbt = Psbt.fromHex(psbtHex, {\n      network: network.BITCOIN_SV_REGTEST,\n      forkCoin: 'bch',\n    });\n    for (let index = 0; index < psbt.data.inputs.length; index++) {\n      const input = psbt.data.inputs[index];\n      if (!input.partialSig) {\n        const txInput = psbt.txInputs[index];\n        const utxo = inputs.find((input) => {\n          return (\n            input.outputTxHash ===\n              Buffer.from(txInput.hash).reverse().toString('hex') &&\n            input.outputIndex === txInput.index\n          );\n        });\n        if (utxo) {\n          const keys: any[] = await wallet._getKeys([utxo.address]);\n          if (keys.length > 0) {\n            const key: any = keys[0];\n            psbt.signInput(index, key);\n          }\n        } else {\n          throw new Error('Error in signing transaction');\n        }\n      }\n    }\n    psbt.validateSignaturesOfAllInputs();\n    psbt.finalizeAllInputs();\n    const transaction = psbt.extractTransaction(true);\n    return await wallet.relayTx(psbt, transaction, inputs, ownOutputs);\n  }\n\n  async verifyRootTx(args: {\n    psbt?: Psbt;\n    transaction?: any;\n  }): Promise<boolean> {\n    const { psbt, transaction } = args;\n    let inputHash;\n    if (psbt || transaction) {\n      if (psbt) {\n        inputHash = Buffer.from(psbt.txInputs[0].hash)\n          .reverse()\n          .toString('hex');\n      }\n      if (transaction) {\n        const { txInps } = transaction;\n        inputHash = txInps[0].outpointTxID;\n      }\n      if (\n        inputHash ===\n        '0000000000000000000000000000000000000000000000000000000000000000'\n      ) {\n        return false;\n      } else if (inputHash === Config.allegoryRootNode) {\n        return true;\n      } else {\n        const {\n          tx: { tx },\n        } = await transactionAPI.getTransactionByTxID(inputHash);\n        return await this.verifyRootTx({ transaction: tx });\n      }\n    }\n    return false;\n  }\n\n  verifyMerkelRoot(args: {\n    leafNode: string;\n    merkelRoot: string;\n    proof: any[];\n  }) {\n    const { leafNode, merkelRoot, proof } = args;\n    let merkelProof = proof;\n    let finalHash = leafNode;\n    while (merkelProof.length > 0) {\n      finalHash = sha256(sha256(finalHash).toString()).toString();\n      const secondLeafHash = merkelProof.shift();\n      finalHash = finalHash.concat(secondLeafHash);\n    }\n    return merkelRoot === finalHash;\n  }\n\n  async getOutpointForName(name: number[]) {\n    if (name && name.length) {\n      try {\n        const { data } = await post('allegory/name-outpoint', {\n          name,\n          isProducer: false,\n        });\n        return data;\n      } catch (error) {\n        throw error;\n      }\n    } else {\n      throw new Error('Invalid name error');\n    }\n  }\n\n  async getResellerURI(name: number[]) {\n    if (name && name.length) {\n      try {\n        const {\n          data: { forName, uri, protocol, isProducer },\n        } = await post('allegory/reseller-uri', {\n          name,\n          isProducer: true,\n        });\n        if (utils.arraysEqual(name, forName) && isProducer === true) {\n          return { isAvailable: false, name };\n        } else {\n          return { isAvailable: true, name, uri, protocol };\n        }\n      } catch (error) {\n        throw error;\n      }\n    } else {\n      throw new Error('Invalid name error');\n    }\n  }\n\n  async createTransaction(args: {\n    allpayName: string;\n    amountInSatoshi: number;\n    feeRate: number;\n  }) {\n    const { allpayName, amountInSatoshi, feeRate } = args;\n    const {\n      forName,\n      isProducer,\n      outPoint: { opTxHash, opIndex },\n      script,\n    } = await this.getOutpointForName(utils.getCodePoint(allpayName));\n    const {\n      tx: {\n        tx: { txOuts },\n      },\n    } = await transactionAPI.getTransactionByTxID(opTxHash);\n    const OP_RETURN_OUTPUT = txOuts[0];\n    const { lockingScript } = OP_RETURN_OUTPUT;\n    const allegoryData = decodeCBORData(lockingScript);\n    const allegory = getAllegoryType(allegoryData);\n    const proxyHost = '127.0.0.1';\n    const proxyPort = 8000;\n    const recipient = sha256(lockingScript).toString();\n    const { unusedAddresses } = await wallet.getUnusedAddresses();\n    const changeAddress = unusedAddresses[0];\n    const { utxos } = await Persist.getUTXOs();\n    const targets = [{ value: Number(amountInSatoshi) }];\n    let { inputs, outputs } = coinSelect(utxos, targets, feeRate);\n    if (!inputs || !outputs) throw new Error('Empty inputs or outputs');\n\n    const {\n      psaBase64,\n      addressProof,\n      utxoProof,\n    } = await this._createTransaction({\n      proxyHost,\n      proxyPort,\n      recipient,\n      amountInSatoshi,\n      changeAddress,\n      utxos: inputs,\n    });\n    const { psbt } = await this.decodeTransaction(psaBase64, inputs);\n    if (allegory && allegory.action instanceof OwnerAction) {\n      const ownerAction = allegory.action as OwnerAction;\n      if (ownerAction.oProxyProviders.length > 0) {\n        const utxoLeafNode = Buffer.from(psbt.txInputs[0].hash)\n          .reverse()\n          .toString('hex')\n          .concat(':')\n          .concat(String(psbt.txInputs[0].index));\n        const addressLeafNode = psbt.txOutputs[0].address!;\n        const addressMerkelRoot =\n          ownerAction.oProxyProviders[0].registration.addressCommitment;\n        const utxoMerkelRoot =\n          ownerAction.oProxyProviders[0].registration.utxoCommitment;\n        const addressCommitment_ = this.verifyMerkelRoot({\n          leafNode: addressLeafNode,\n          merkelRoot: addressMerkelRoot,\n          proof: addressProof,\n        });\n        const utxoCommitment_ = this.verifyMerkelRoot({\n          leafNode: utxoLeafNode,\n          merkelRoot: utxoMerkelRoot,\n          proof: utxoProof,\n        });\n\n        const addressCommitment = true;\n        const utxoCommitment = true;\n        return {\n          psbt,\n          inputs: inputs,\n          ownOutputs: [{ type: '', title: '', address: changeAddress }],\n          addressCommitment,\n          utxoCommitment,\n        };\n      }\n    }\n    throw Error('Error in drafting Allegory Transaction');\n  }\n\n  async _createTransaction(data: {\n    proxyHost: string;\n    proxyPort: number;\n    recipient: string;\n    amountInSatoshi: number;\n    changeAddress: string;\n    utxos: {\n      outputTxHash: string;\n      outputIndex: number;\n      value: number;\n    }[];\n  }): Promise<any> {\n    const {\n      proxyHost,\n      proxyPort,\n      recipient,\n      amountInSatoshi,\n      changeAddress,\n      utxos,\n    } = data;\n    const inputs = utxos.map((utxo) => {\n      return [\n        {\n          txid: utxo.outputTxHash,\n          index: utxo.outputIndex,\n        },\n        Number(utxo.value),\n      ];\n    });\n    const {\n      data: { tx: psaBase64, addressProof, utxoProof },\n    } = await post(\n      'ps-allpay-tx',\n      {\n        inputs: inputs,\n        recipient: recipient,\n        amount: Number(amountInSatoshi),\n        change: changeAddress,\n      },\n      {\n        baseURL: `http://${proxyHost}:${proxyPort}/v1`,\n      }\n    );\n    return { psaBase64, addressProof, utxoProof };\n  }\n\n  async registerName(data: {\n    proxyHost: string;\n    proxyPort: number;\n    name: string;\n    addressCount: number;\n  }) {\n    try {\n      const { proxyHost, proxyPort, name, addressCount } = data;\n      const nameCodePoint = utils.getCodePoint(name);\n      const bip32ExtendedKey = await Persist.getBip32ExtendedKey();\n      const xpubKey = wallet.getBIP32ExtendedPubKey(bip32ExtendedKey);\n      const returnAddress = await wallet.getUnusedNUTXOAddress();\n      const { nUTXOs } = await Persist.getNUtxo(name);\n      if (nUTXOs) {\n        const psaBase64 = await this._registerName({\n          proxyHost,\n          proxyPort,\n          name: nameCodePoint,\n          xpubKey,\n          returnAddress,\n          addressCount,\n          nutxo: nUTXOs,\n        });\n        const {\n          psbt,\n          fundingInputs,\n          ownOutputs,\n        } = await this.decodeTransaction(psaBase64, [nUTXOs], true);\n        return {\n          psbt,\n          inputs: [...nUTXOs, ...fundingInputs],\n          ownOutputs: [\n            { type: 'nUTXO', title: 'Name UTXO', address: returnAddress },\n            ...ownOutputs,\n          ],\n        };\n      } else {\n        throw new Error(\"Couldn't find utxo for selected name\");\n      }\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async _registerName(data: {\n    proxyHost: string;\n    proxyPort: number;\n    name: number[];\n    xpubKey: string;\n    returnAddress: string;\n    addressCount: number;\n    nutxo: {\n      outputTxHash: string;\n      outputIndex: number;\n      value: number;\n    };\n  }): Promise<any> {\n    const {\n      proxyHost,\n      proxyPort,\n      name,\n      xpubKey,\n      nutxo,\n      returnAddress,\n      addressCount,\n    } = data;\n    const nameUtxo = [\n      {\n        txid: nutxo.outputTxHash,\n        index: nutxo.outputIndex,\n      },\n      nutxo.value,\n    ];\n    const {\n      data: { tx: psaBase64 },\n    } = await post(\n      'register',\n      {\n        name: name,\n        xpubKey: xpubKey,\n        nutxo: nameUtxo,\n        return: returnAddress,\n        addressCount: Number(addressCount),\n      },\n      {\n        baseURL: `http://${proxyHost}:${proxyPort}/v1`,\n      }\n    );\n    return psaBase64;\n  }\n}\n\nexport const allPay = new Allpay();\n","import { post } from './httpClient';\n\nclass AuthAPI {\n  login = async (username: string, password: string) => {\n    try {\n      const { data } = await post('auth', { username, password });\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n}\n\nexport const authAPI = new AuthAPI();\n","import { get } from './httpClient';\nimport Qs from 'qs';\n\nclass BlockAPI {\n  getBlockByBlockHeight = async (height: number) => {\n    try {\n      const { data } = await get(`block/height/${height}`);\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  getBlocksByBlockHeights = async (heights: number[]) => {\n    try {\n      const { data } = await get(`block/heights`, {\n        params: {\n          height: heights,\n        },\n        paramsSerializer: (params) =>\n          Qs.stringify(params, { arrayFormat: 'repeat' }),\n      });\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  getBlockByBlockHash = async (blockHash: string) => {\n    try {\n      const { data } = await get(`block/hash/${blockHash}`);\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  getBlocksByBlockHashes = async (blockHashes: string[]) => {\n    try {\n      const { data } = await get(`block/hashes`, {\n        params: {\n          hash: blockHashes,\n        },\n        paramsSerializer: (params) =>\n          Qs.stringify(params, { arrayFormat: 'repeat' }),\n      });\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  getTXIDByHash = async (\n    blockHash: string,\n    pagenumber?: number,\n    pagesize?: number\n  ) => {\n    try {\n      const { data } = await get(`block/txids/${blockHash}`, {\n        params: {\n          pagenumber,\n          pagesize,\n        },\n      });\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n}\n\nexport const blockAPI = new BlockAPI();\n","import { get } from './httpClient';\n\nclass MerkleBranchAPI {\n  getMerkleBranchByTXID = async (txId: string) => {\n    try {\n      const { data } = await get(`merklebranch/${txId}`);\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n}\n\nexport const merkleBranchAPI = new MerkleBranchAPI();\n","import { get } from './httpClient';\nimport Qs from 'qs';\n\nclass ScriptHashAPI {\n  getOutputsByScriptHash = async (scriptHash: string, pagesize?: number) => {\n    try {\n      const { data } = await get(`scripthash/${scriptHash}/outputs`, {\n        params: {\n          pagesize,\n        },\n      });\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  getOutputsByScriptHashes = async (scriptHashes: string[]) => {\n    try {\n      const { data } = await get(`scripthashes/outputs/`, {\n        params: {\n          scripthash: scriptHashes,\n        },\n        paramsSerializer: (params) =>\n          Qs.stringify(params, { arrayFormat: 'repeat' }),\n      });\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  getUTXOsByScriptHash = async (scriptHash: string, pagesize?: number) => {\n    try {\n      const { data } = await get(`scripthash/${scriptHash}/utxos`, {\n        params: {\n          pagesize,\n        },\n      });\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  getUTXOsByScriptHashes = async (scriptHashes: string[]) => {\n    try {\n      const { data } = await get(`scripthashes/utxos`, {\n        params: {\n          scripthash: scriptHashes,\n        },\n        paramsSerializer: (params) =>\n          Qs.stringify(params, { arrayFormat: 'repeat' }),\n      });\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n}\n\nexport const scriptHashAPI = new ScriptHashAPI();\n","import { get, post, put, deleteR } from './httpClient';\n\nclass UserAPI {\n  addUser = async (\n    username: string,\n    firstName: string,\n    lastName: string,\n    email: string\n  ) => {\n    try {\n      const { data } = await post('user', {\n        username,\n        firstName,\n        lastName,\n        email,\n      });\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  getUser = async (username: string) => {\n    try {\n      const { data } = await get(`user/${username}`);\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  getCurrentUser = async () => {\n    try {\n      const { data } = await get('user');\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  updateUser = async (\n    username: string,\n    password: string,\n    firstName: string,\n    lastName: string,\n    email: string,\n    apiQuota: number,\n    apiExpiryTime: Date\n  ) => {\n    try {\n      const { data } = await put(`user/${username}`, {\n        data: {\n          password,\n          firstName,\n          lastName,\n          email,\n          apiQuota,\n          apiExpiryTime: apiExpiryTime.getUTCDate(),\n        },\n      });\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  deleteUser = async (username: string) => {\n    try {\n      const { data } = await deleteR(`user/${username}`);\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n}\n\nexport const userAPI = new UserAPI();\n"],"names":["BITCOIN_SV","bip32","public","private","bech32","messagePrefix","pubKeyHash","scriptHash","wif","BITCOIN_SV_REGTEST","p2wpkh","baseNetwork","p2wpkhInP2sh","p2wsh","p2wshInP2sh","BITCOIN_SV_TESTNET","BIP32","derivationPath","BIP44","purpose","coin","account","change","nUTXODerivationPath","httpReq","init","host","port","axios","create","baseURL","httpsAgent","https","Agent","rejectUnauthorized","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","console","log","Promise","reject","response","status","userName","password","post","sessionKey","data","auth","setItem","resolve","Error","get","url","put","deleteR","delete","Allegory","_version","value","_name","_action","ProducerAction","_producerInput","_producerOutput","_pOwnerOutput","_extensions","OwnerAction","_ownerInput","_ownerOutput","_oProxyProviders","Index","_index","ProducerOutput","_producer","_pVendorEndpoint","OwnerOutput","_owner","_oVendorEndpoint","OwnerExtension","_ownerOutputEx","_codePoint","ProducerExtension","_producerOutputEx","Endpoint","_protocol","_uri","ProxyProvider","_service","_mode","_endpoint","_registration","Registration","_addressCommitment","_utxoCommitment","_signature","_expiry","getAllegoryType","decodedCBOR","allegory","length","version","name","action","_getOwnerAction","_getProducerAction","ownerAction","ownerInput","_getIndex","ownerOutput","_getOwnerOutput","oProxyProviders","_getProxyProviders","index","owner","oVendorEndpoint","_getVendorEndpoint","_getEndPoint","datas","proxyProviders","map","proxyProvider","service","mode","endpoint","registration","_getRegistration","addressCommitment","utxoCommitment","signature","expiry","producerAction","producerInput","producerOutput","_getProducerOutput","pOwnerOutput","_getPOwnerOutput","extensions","_getExtensions","producer","pVendorEndpoint","_getOwnerExtension","_getProducerExtension","ownerExtension","ownerOutputEx","codePoint","producerExtension","producerOutputEx","protocol","uri","removeOpReturn","prefixRemoved","substring","opcode","parseInt","decodeCBORData","hexData","allegoryDataBuffer","Buffer","from","allegoryDataArrayBuffer","buffer","slice","byteOffset","byteLength","CBOR","decode","PouchDB","plugin","MemoryAdapter","pouchdbFind","profiles","db","credentials","BIP32_EXTENDED_KEY","NUTXO_EXTENDED_KEY","key","set","doc","prop","dbName","revs_limit","auto_compaction","bulkDocs","_id","createProfile","cryptedMnemonic","profileName","newProfile","existingProfiles","Array","updateProfile","currentProfileName","newProfileName","revs","profileIndex","findIndex","profile","profilesArray","_rev","getProfiles","profileNames","existingProfile","login","selectedProfile","find","bip39Mnemonic","AES","decrypt","toString","CryptoJS","enc","Utf8","getBip32ExtendedKey","bip32ExtendedKeyDoc","setBip32ExtendedKey","getNUTXOExtendedKey","nUTXOExtendedKeyDoc","setNUTXOExtendedKey","getNUTXODerivedKeys","allDocs","include_docs","startkey","endkey","rows","existingNUTXODerivedKeys","row","upsertNUTXODerivedKeys","keys","keyId","docs","String","padStart","getDerivedKeys","existingDerivedKeys","upsertDerivedKeys","getOutputs","options","skip","nextOutputsCursor","id","outputs","markOutputAsUnspent","inputs","markAsUnspentOutputs","input","createIndex","fields","selector","outputTxHash","$eq","outputIndex","outputDoc","unspentOutputs","output","isSpent","push","upsertOutputs","existingOutputs","outputId","spendInfo","updateOutputs","updateDoc","results","forEach","result","element","deleteOutputs","deletedOutputs","deletedOutput","_deleted","isInOutputs","getTransactions","descending","nextTransactionCursor","limit","transactions","getTransactionsByConfirmations","$and","confirmation","$lte","$exists","transactionDocs","upsertTransactions","existingTransactions","txId","reverse","transaction","deleteTransactions","updatedDoc","transactionDoc","markAddressesUsed","addresses","matchedDerivedKeys","filter","includes","address","isUsed","getUTXOs","isNameOutpoint","utxos","getNUtxo","nUTXOs","getUnregisteredName","names","destroy","viewCleanup","AddressAPI","pagesize","cursor","params","paramsSerializer","Qs","stringify","arrayFormat","addressAPI","TransactionAPI","txIDs","txID","hash","rawTx","outpoint","transactionAPI","ChainAPI","startBlockHeight","chainAPI","Utils","bip39","seed","network","fromBase58","bip32RootKey","toBase58","bip32ExtendedKey","neutered","derivationPaths","path","codePoints","i","fromCodePoint","satoshi","getCodePoint","nameCodePoints","codePointAt","arraysEqual","a","b","Wallet","bip32Interface","xprvkeyB58","isNeutered","_initWallet","_mnemonicToSeedSync","_getBIP32RootKeyFromSeed","_getBIP32ExtendedKey","nUTXOExtendedKey","Persist","countOfUnusedNUTXOKeys","_countOfUnusedKeys","lastKeyIndex","indexText","split","pop","generateDerivedKeys","Number","newDerivedKeys","derivedKeys","countOfUnusedKeys","fromSeed","extendedKey","pathBits","bit","isNaN","hardened","deriveHardened","derive","_generateDerivedKeys","useBip38","bip38password","useHardenedAddresses","useUncompressed","keyPair","ECPair","fromPrivateKey","privateKey","compressed","payments","p2pkh","pubkey","publicKey","_getPrivKey","hasPrivkey","privkey","toWIF","indexStart","count","derivedKey","_getAddressesFromKeys","reduce","acc","currKey","_removeDuplicate","sortedOutputs","sort","output1","output2","blockHeight","unconfirmedOutputs","txIndex","duplicateOutputs","splice","uniqueOutputs","self","t","processAllegoryTransactions","updatedOutputs","nameOutput","validConfirmedNamePurchaseTxs","validConfirmedNamePurchaseTx","tx","allegoryTransactions","lockingScript","startsWith","confirmedNamePurchaseTxs","allegoryTransaction","allegoryData","producerExtensions","extension","producerCodePoints","utils","codePointToName","confirmedNamePurchaseTx","isProducer","forName","outPoint","opIndex","opTxHash","script","_getOutputs","newNUTXODerivedKeys","nUTXODerivedKeys","diffOutputsWithDuplicate","diffOutputs","newKeys","spentOutputs","outgoingTxIds","Set","spendingTxId","incomingTxIds","txIds","_getTransactions","txs","getChainInfo","chainInfo","chainTip","sortedTx","tx1","tx2","txInps","txOuts","newTxInps","isMineAddress","isNUTXOAddress","txInputIndex","isMine","isNUTXO","newTxOuts","newTransaction","newDiffOutputs","diff","chunkedTxIds","_","all","chunkedTxId","getTransactionsByTxIDs","flat","prevDiffOutputs","prevKeys","chunkedUsedDerivedKeys","chunkedUsedDerivedKey","_getOutputsByAddresses","outputsByAddresses","updatedKeys","found","some","walletKeys","nUTXOKeys","nextDerivedKeys","lastNUTXOKeyIndex","nextNUTXODerivedKeys","nextKeys","prevOutputs","nextCursor","getOutputsByAddresses","_getDiffOutputs","newOutputs","getUnusedNUTXOAddress","unusedNUTXODerivedKeys","existingDerivedKey","Boolean","_getKeys","KeyIndex","fromWIF","networks","regtest","updateTransactionsConfirmations","updatedTransactions","deletedTransactions","txsWithConfirmation","unconfirmedTransactions","matchedTxWithConfirmation","unconfirmedTransaction","diffInMinutes","differenceInMinutes","Date","parse","createdAt","ownOutputs","relayTx","psbt","transactionHex","toHex","base64","broadcastRawTransaction","txBroadcast","spentUtxos","changeOutputs","ownOutput","transactionOutput","outs","transactionIndex","getId","ins","isMineInput","inp","witnessUtxo","isMineOutput","type","_createSendTransaction","targets","feeRate","signInput","validateSignaturesOfAllInputs","finalizeAllInputs","extractTransaction","usedAddresses","coinSelect","Psbt","forkCoin","setVersion","addInput","addOutput","getUnusedAddresses","excludeAddresses","unusedAddresses","title","createSendTransaction","receiverAddress","amountInSatoshi","getTransactionFee","fee","getBalance","balance","currOutput","generateMnemonic","strength","rng","wordlist","getUsedAddresses","outputsGroupedByAddress","currentBalance","incomingBalance","outgoingBalance","lastTransaction","Object","entries","filteredUnusedAddresses","unusedAddress","profileId","cryptedText","encrypt","faker","firstName","updateProfileName","logout","runScript","Allpay","buyName","priceInSatoshi","paymentInputs","wallet","outputOwner","outputChange","psaBase64","psaTx","decodeTransaction","snv","addFunding","partiallySignTransaction","JSON","updateInput","partialSig","fundingInputs","sequence","utxoInput","signRelayTransaction","psbtHex","fromHex","txInput","txInputs","utxo","verifyRootTx","args","inputHash","outpointTxID","Config","allegoryRootNode","getTransactionByTxID","verifyMerkelRoot","leafNode","merkelRoot","proof","merkelProof","finalHash","sha256","secondLeafHash","shift","concat","getOutpointForName","getResellerURI","isAvailable","createTransaction","allpayName","OP_RETURN_OUTPUT","proxyHost","proxyPort","recipient","changeAddress","_createTransaction","addressProof","utxoProof","utxoLeafNode","addressLeafNode","txOutputs","addressMerkelRoot","utxoMerkelRoot","addressCommitment_","utxoCommitment_","txid","amount","registerName","addressCount","nameCodePoint","xpubKey","getBIP32ExtendedPubKey","returnAddress","_registerName","nutxo","nameUtxo","return","allPay","AuthAPI","username","authAPI","BlockAPI","height","heights","blockHash","blockHashes","pagenumber","blockAPI","MerkleBranchAPI","merkleBranchAPI","ScriptHashAPI","scriptHashes","scripthash","scriptHashAPI","UserAPI","lastName","email","apiQuota","apiExpiryTime","getUTCDate","userAPI"],"mappings":"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"}