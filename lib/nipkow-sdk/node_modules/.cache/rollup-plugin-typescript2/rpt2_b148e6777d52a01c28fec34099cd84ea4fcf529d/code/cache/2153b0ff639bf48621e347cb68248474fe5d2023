{"code":"import sha256 from 'crypto-js/sha256';\r\nimport coinSelect from 'coinselect';\r\nimport { Psbt, payments } from 'bitcoinjs-lib';\r\nimport { decodeCBORData, getAllegoryType, OwnerAction } from './Allegory';\r\nimport wallet from './Wallet';\r\nimport utils from './Utils';\r\nimport { post } from './httpClient';\r\nimport * as Persist from './Persist';\r\nimport { transactionAPI } from './TransactionAPI';\r\nimport proxyProvider from './ProxyProvider';\r\nimport Config from './Config.json';\r\nimport network from './constants/network';\r\nclass Allpay {\r\n    async buyName(data) {\r\n        try {\r\n            const { host, port, name, isProducer } = data;\r\n            const priceInSatoshi = 1000000;\r\n            const feeRate = 0;\r\n            const { utxos } = await Persist.getUTXOs();\r\n            const targets = [{ value: Number(priceInSatoshi) }];\r\n            let { inputs, outputs } = coinSelect(utxos, targets, feeRate);\r\n            if (!inputs || !outputs)\r\n                throw new Error('Empty inputs or outputs');\r\n            const paymentInputs = inputs.map((input) => {\r\n                return [\r\n                    {\r\n                        opTxHash: input.outputTxHash,\r\n                        opIndex: input.outputIndex,\r\n                    },\r\n                    input.value,\r\n                ];\r\n            });\r\n            const outputOwner = await wallet.getUnusedNUTXOAddress();\r\n            const { unusedAddresses } = await wallet.getUnusedAddresses();\r\n            const outputChange = unusedAddresses[0];\r\n            if (outputOwner && outputChange) {\r\n                const { data: { psaTx: psaBase64 }, } = await post('partialsign', {\r\n                    paymentInputs,\r\n                    name: [name, isProducer],\r\n                    outputOwner,\r\n                    outputChange,\r\n                }, {\r\n                    baseURL: `https://${host}:${port}/v1`,\r\n                });\r\n                const { psbt } = await this.decodeTransaction(psaBase64, inputs);\r\n                // const snv = await this.verifyRootTx({ psbt });\r\n                const ownOutputs = [\r\n                    { type: 'nUTXO', title: 'Name UTXO', address: outputOwner },\r\n                    { type: '', title: '', address: outputChange },\r\n                ];\r\n                return {\r\n                    psbt,\r\n                    outpoint: { name, isProducer },\r\n                    inputs,\r\n                    ownOutputs,\r\n                    snv: true,\r\n                };\r\n            }\r\n            else {\r\n                throw new Error('Error configuring input params');\r\n            }\r\n        }\r\n        catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n    async decodeTransaction(psaBase64, inputs, addFunding) {\r\n        const partiallySignTransaction = JSON.parse(Buffer.from(psaBase64, 'base64').toString());\r\n        try {\r\n            const psbt = new Psbt({\r\n                network: network.BITCOIN_SV_REGTEST,\r\n                forkCoin: 'bch',\r\n            });\r\n            psbt.setVersion(1);\r\n            partiallySignTransaction.ins.forEach((input) => {\r\n                if (input.script) {\r\n                    const p2pkh = payments.p2pkh({\r\n                        input: Buffer.from(input.script, 'hex'),\r\n                        network: network.BITCOIN_SV_REGTEST,\r\n                    });\r\n                    psbt.addInput({\r\n                        hash: input.outpoint.hash,\r\n                        index: input.outpoint.index,\r\n                        sequence: input.sequence,\r\n                        witnessUtxo: {\r\n                            script: p2pkh.output,\r\n                            value: input.value,\r\n                        },\r\n                    });\r\n                }\r\n                else {\r\n                    const utxoInput = inputs.find((inp) => {\r\n                        return (inp.outputTxHash === input.outpoint.hash &&\r\n                            inp.outputIndex === input.outpoint.index);\r\n                    });\r\n                    if (utxoInput) {\r\n                        const p2pkh = payments.p2pkh({\r\n                            address: utxoInput.address,\r\n                            network: network.BITCOIN_SV_REGTEST,\r\n                        });\r\n                        psbt.addInput({\r\n                            hash: input.outpoint.hash,\r\n                            index: input.outpoint.index,\r\n                            sequence: input.sequence,\r\n                            witnessUtxo: {\r\n                                script: p2pkh.output,\r\n                                value: utxoInput.value,\r\n                            },\r\n                        });\r\n                    }\r\n                    else {\r\n                        throw new Error('Error in setting psbt inputs');\r\n                    }\r\n                }\r\n            });\r\n            let fundingInputs = [];\r\n            const ownOutputs = [];\r\n            if (addFunding) {\r\n                const { utxos } = await Persist.getUTXOs();\r\n                const feeRate = 5000;\r\n                const amountInSatoshi = 10000;\r\n                const targets = [{ value: Number(amountInSatoshi) }];\r\n                const { inputs, outputs } = coinSelect(utxos, targets, feeRate);\r\n                fundingInputs = inputs;\r\n                inputs.forEach((input) => {\r\n                    const p2pkh = payments.p2pkh({\r\n                        address: input.address,\r\n                        network: network.BITCOIN_SV_REGTEST,\r\n                    });\r\n                    psbt.addInput({\r\n                        hash: input.outputTxHash,\r\n                        index: input.outputIndex,\r\n                        witnessUtxo: {\r\n                            script: p2pkh.output,\r\n                            value: input.value,\r\n                        },\r\n                    });\r\n                });\r\n                partiallySignTransaction.outs.forEach((output, index) => {\r\n                    psbt.addOutput({\r\n                        script: Buffer.from(output.script, 'hex'),\r\n                        value: output.value,\r\n                    });\r\n                });\r\n                const usedAddresses = [];\r\n                for (let index = 0; index < outputs.length; index++) {\r\n                    const output = outputs[index];\r\n                    if (!output.address) {\r\n                        const { unusedAddresses } = await wallet.getUnusedAddresses({\r\n                            excludeAddresses: usedAddresses,\r\n                        });\r\n                        const address = unusedAddresses[0];\r\n                        usedAddresses.push(address);\r\n                        output.address = address;\r\n                        ownOutputs.push({ type: '', title: '', address });\r\n                    }\r\n                    psbt.addOutput({\r\n                        address: output.address,\r\n                        value: output.value,\r\n                    });\r\n                }\r\n            }\r\n            else {\r\n                partiallySignTransaction.outs.forEach((output, index) => {\r\n                    psbt.addOutput({\r\n                        script: Buffer.from(output.script, 'hex'),\r\n                        value: output.value,\r\n                    });\r\n                });\r\n            }\r\n            partiallySignTransaction.ins.forEach((input, index) => {\r\n                if (input.script) {\r\n                    const p2pkh = payments.p2pkh({\r\n                        input: Buffer.from(input.script, 'hex'),\r\n                        network: network.BITCOIN_SV_REGTEST,\r\n                    });\r\n                    psbt.updateInput(index, {\r\n                        partialSig: [\r\n                            {\r\n                                pubkey: p2pkh.pubkey,\r\n                                signature: p2pkh.signature,\r\n                            },\r\n                        ],\r\n                    });\r\n                }\r\n            });\r\n            return { psbt, fundingInputs, ownOutputs };\r\n        }\r\n        catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n    async signRelayTransaction({ psbtHex, inputs, ownOutputs, }) {\r\n        const psbt = Psbt.fromHex(psbtHex, {\r\n            network: network.BITCOIN_SV_REGTEST,\r\n            forkCoin: 'bch',\r\n        });\r\n        for (let index = 0; index < psbt.data.inputs.length; index++) {\r\n            const input = psbt.data.inputs[index];\r\n            if (!input.partialSig) {\r\n                const txInput = psbt.txInputs[index];\r\n                const utxo = inputs.find((input) => {\r\n                    return (input.outputTxHash ===\r\n                        Buffer.from(txInput.hash).reverse().toString('hex') &&\r\n                        input.outputIndex === txInput.index);\r\n                });\r\n                if (utxo) {\r\n                    const keys = await wallet._getKeys([utxo.address]);\r\n                    if (keys.length > 0) {\r\n                        const key = keys[0];\r\n                        psbt.signInput(index, key);\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Error in signing transaction');\r\n                }\r\n            }\r\n        }\r\n        psbt.validateSignaturesOfAllInputs();\r\n        psbt.finalizeAllInputs();\r\n        const transaction = psbt.extractTransaction(true);\r\n        const usedAddresses = ownOutputs.map(({ address }) => address);\r\n        return await wallet.relayTx(transaction, inputs, usedAddresses);\r\n    }\r\n    async verifyRootTx(args) {\r\n        const { psbt, transaction } = args;\r\n        let inputHash;\r\n        if (psbt || transaction) {\r\n            if (psbt) {\r\n                inputHash = Buffer.from(psbt.txInputs[0].hash)\r\n                    .reverse()\r\n                    .toString('hex');\r\n            }\r\n            if (transaction) {\r\n                const { txInps } = transaction;\r\n                inputHash = txInps[0].outpointTxID;\r\n            }\r\n            if (inputHash ===\r\n                '0000000000000000000000000000000000000000000000000000000000000000') {\r\n                return false;\r\n            }\r\n            else if (inputHash === Config.allegoryRootNode) {\r\n                return true;\r\n            }\r\n            else {\r\n                const { tx: { tx }, } = await transactionAPI.getTransactionByTxID(inputHash);\r\n                return await this.verifyRootTx({ transaction: tx });\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    verifyMerkelRoot(args) {\r\n        const { leafNode, merkelRoot, proof } = args;\r\n        let merkelProof = proof;\r\n        let finalHash = leafNode;\r\n        while (merkelProof.length > 0) {\r\n            finalHash = sha256(sha256(finalHash).toString()).toString();\r\n            const secondLeafHash = merkelProof.shift();\r\n            finalHash = finalHash.concat(secondLeafHash);\r\n        }\r\n        return merkelRoot === finalHash;\r\n    }\r\n    async getOutpointForName(name) {\r\n        if (name && name.length) {\r\n            try {\r\n                const { data } = await post('allegory/name-outpoint', {\r\n                    name,\r\n                    isProducer: false,\r\n                });\r\n                return data;\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        }\r\n        else {\r\n            throw new Error('Invalid name error');\r\n        }\r\n    }\r\n    async getResellerURI(name) {\r\n        if (name && name.length) {\r\n            try {\r\n                const { data: { forName, uri, protocol, isProducer }, } = await post('allegory/reseller-uri', {\r\n                    name,\r\n                    isProducer: true,\r\n                });\r\n                if (utils.arraysEqual(name, forName) && isProducer === true) {\r\n                    return { isAvailable: false, name };\r\n                }\r\n                else {\r\n                    return { isAvailable: true, name, uri, protocol };\r\n                }\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        }\r\n        else {\r\n            throw new Error('Invalid name error');\r\n        }\r\n    }\r\n    async createTransaction(args) {\r\n        const { allpayName, amountInSatoshi, feeRate } = args;\r\n        const { forName, isProducer, outPoint: { opTxHash, opIndex }, script, } = await this.getOutpointForName(utils.getCodePoint(allpayName));\r\n        const { tx: { tx: { txOuts }, }, } = await transactionAPI.getTransactionByTxID(opTxHash);\r\n        const OP_RETURN_OUTPUT = txOuts[0];\r\n        const { lockingScript } = OP_RETURN_OUTPUT;\r\n        const allegoryData = decodeCBORData(lockingScript);\r\n        const allegory = getAllegoryType(allegoryData);\r\n        const proxyHost = '127.0.0.1';\r\n        const proxyPort = 9099;\r\n        const recipient = sha256(lockingScript).toString();\r\n        const { unusedAddresses } = await wallet.getUnusedAddresses();\r\n        const changeAddress = unusedAddresses[0];\r\n        const { utxos } = await Persist.getUTXOs();\r\n        const targets = [{ value: Number(amountInSatoshi) }];\r\n        let { inputs, outputs } = coinSelect(utxos, targets, feeRate);\r\n        if (!inputs || !outputs)\r\n            throw new Error('Empty inputs or outputs');\r\n        const data = await this._createTransaction({\r\n            proxyHost,\r\n            proxyPort,\r\n            recipient,\r\n            amountInSatoshi,\r\n            changeAddress,\r\n            utxos: inputs,\r\n        });\r\n        const tData = data.substring(1);\r\n        const jsonData = JSON.parse(tData);\r\n        const { result: { tx: psbtTx, addressProof, utxoProof }, } = jsonData;\r\n        const { psbt } = await this.decodeTransaction(psbtTx, inputs);\r\n        if (allegory && allegory.action instanceof OwnerAction) {\r\n            const ownerAction = allegory.action;\r\n            if (ownerAction.oProxyProviders.length > 0) {\r\n                const utxoLeafNode = Buffer.from(psbt.txInputs[0].hash)\r\n                    .reverse()\r\n                    .toString('hex')\r\n                    .concat(String(psbt.txInputs[0].index));\r\n                const addressLeafNode = psbt.txOutputs[0].address;\r\n                const addressMerkelRoot = ownerAction.oProxyProviders[0].registration.addressCommitment;\r\n                const utxoMerkelRoot = ownerAction.oProxyProviders[0].registration.utxoCommitment;\r\n                // const addressCommitment = this.verifyMerkelRoot({\r\n                //   leafNode: addressLeafNode,\r\n                //   merkelRoot: addressMerkelRoot,\r\n                //   proof: addressProof,\r\n                // });\r\n                // const utxoCommitment = this.verifyMerkelRoot({\r\n                //   leafNode: utxoLeafNode,\r\n                //   merkelRoot: utxoMerkelRoot,\r\n                //   proof: utxoProof,\r\n                // });\r\n                const addressCommitment = true;\r\n                const utxoCommitment = true;\r\n                return {\r\n                    psbt,\r\n                    inputs: inputs,\r\n                    ownOutputs: [{ type: '', title: '', address: changeAddress }],\r\n                    addressCommitment,\r\n                    utxoCommitment,\r\n                };\r\n            }\r\n        }\r\n        throw Error('Error in drafting Allegory Transaction');\r\n    }\r\n    async _createTransaction(data) {\r\n        const { recipient, amountInSatoshi, changeAddress, utxos } = data;\r\n        const inputs = utxos.map((utxo) => {\r\n            return [\r\n                {\r\n                    txid: utxo.outputTxHash,\r\n                    index: utxo.outputIndex,\r\n                },\r\n                Number(utxo.value),\r\n            ];\r\n        });\r\n        const jsonRPCRequest = {\r\n            id: 1,\r\n            jsonrpc: '2.0',\r\n            method: 'PS_ALLPAY_TX',\r\n            params: {\r\n                inputs: inputs,\r\n                recipient: recipient,\r\n                amount: Number(amountInSatoshi),\r\n                change: changeAddress,\r\n            },\r\n        };\r\n        return await proxyProvider.sendRequest(data.proxyHost, data.proxyPort, JSON.stringify(jsonRPCRequest));\r\n    }\r\n    async registerName(data) {\r\n        try {\r\n            const { proxyHost, proxyPort, name, addressCount } = data;\r\n            const nameCodePoint = utils.getCodePoint(name);\r\n            const bip32ExtendedKey = await Persist.getBip32ExtendedKey();\r\n            const xpubKey = wallet.getBIP32ExtendedPubKey(bip32ExtendedKey);\r\n            const returnAddress = await wallet.getUnusedNUTXOAddress();\r\n            const { nUTXOs } = await Persist.getNUtxo(name);\r\n            if (nUTXOs) {\r\n                const data = await this._registerName({\r\n                    proxyHost,\r\n                    proxyPort,\r\n                    name: nameCodePoint,\r\n                    xpubKey,\r\n                    returnAddress,\r\n                    addressCount,\r\n                    nutxo: nUTXOs,\r\n                });\r\n                const tData = JSON.parse(data);\r\n                const { result: { tx: psaBase64 }, } = tData;\r\n                const { psbt, fundingInputs, ownOutputs, } = await this.decodeTransaction(psaBase64, [nUTXOs], true);\r\n                return {\r\n                    psbt,\r\n                    inputs: [...nUTXOs, ...fundingInputs],\r\n                    ownOutputs: [\r\n                        { type: 'nUTXO', title: 'Name UTXO', address: returnAddress },\r\n                        ...ownOutputs,\r\n                    ],\r\n                };\r\n            }\r\n            else {\r\n                throw new Error(\"Couldn't find utxo for selected name\");\r\n            }\r\n        }\r\n        catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n    async _registerName(data) {\r\n        const { name, xpubKey, nutxo, returnAddress, addressCount } = data;\r\n        const nameUtxo = [\r\n            {\r\n                txid: nutxo.outputTxHash,\r\n                index: nutxo.outputIndex,\r\n            },\r\n            nutxo.value,\r\n        ];\r\n        const jsonRPCRequest = {\r\n            id: 0,\r\n            jsonrpc: '2.0',\r\n            method: 'REGISTER',\r\n            params: {\r\n                name: name,\r\n                xpubKey: xpubKey,\r\n                nutxo: nameUtxo,\r\n                return: returnAddress,\r\n                addressCount: Number(addressCount),\r\n            },\r\n        };\r\n        return await proxyProvider.sendRequest(data.proxyHost, data.proxyPort, JSON.stringify(jsonRPCRequest));\r\n    }\r\n}\r\nexport const allPay = new Allpay();\r\n//# sourceMappingURL=Allpay.js.map","references":["/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/node_modules/@types/crypto-js/sha256/index.d.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/node_modules/coinselect/index.js","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/node_modules/bitcoinjs-lib/types/index.d.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/src/Allegory.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/src/Wallet.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/src/Utils.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/src/httpClient.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/src/Persist.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/src/TransactionAPI.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/src/ProxyProvider.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/src/Config.json","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/src/constants/network.ts"],"map":"{\"version\":3,\"file\":\"Allpay.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/Allpay.ts\"],\"names\":[],\"mappings\":\"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\"}"}
