{"code":"import { get, post } from './httpClient';\r\nimport Qs from 'qs';\r\nclass TransactionAPI {\r\n    constructor() {\r\n        this.getTransactionByTxID = async (txId) => {\r\n            try {\r\n                const { data } = await get(`transaction/${txId}`);\r\n                return data;\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        };\r\n        this.getTransactionsByTxIDs = async (txIDs) => {\r\n            try {\r\n                const { data } = await get(`transactions`, {\r\n                    params: {\r\n                        id: txIDs,\r\n                    },\r\n                    paramsSerializer: (params) => Qs.stringify(params, { arrayFormat: 'repeat' }),\r\n                });\r\n                return data;\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        };\r\n        this.getRawTransactionByTxID = async (txID) => {\r\n            try {\r\n                const { data } = await get(`rawtransaction/${txID}`);\r\n                return data;\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        };\r\n        this.getRawTransactionsByTxIDs = async (txIDs) => {\r\n            try {\r\n                const { data } = await get(`rawtransactions`, {\r\n                    params: {\r\n                        id: txIDs,\r\n                    },\r\n                    paramsSerializer: (params) => Qs.stringify(params, { arrayFormat: 'repeat' }),\r\n                });\r\n                return data;\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        };\r\n        this.broadcastRawTransaction = async (hash) => {\r\n            try {\r\n                const { data } = await post(`relaytx`, {\r\n                    rawTx: hash,\r\n                });\r\n                return data;\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        };\r\n        this.getSpendStatusByOutpoint = async (outpoint) => {\r\n            try {\r\n                const { data } = await get(`transaction/${outpoint}/index/0`);\r\n                return data;\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        };\r\n    }\r\n}\r\nexport const transactionAPI = new TransactionAPI();\r\n//# sourceMappingURL=TransactionAPI.js.map","references":["/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/src/httpClient.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/node_modules/@types/qs/index.d.ts"],"map":"{\"version\":3,\"file\":\"TransactionAPI.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/TransactionAPI.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,MAAM,cAAc,CAAC;AACzC,OAAO,EAAE,MAAM,IAAI,CAAC;AACpB,MAAM,cAAc;IAApB;QACE,yBAAoB,GAAG,KAAK,EAAE,IAAY,EAAE,EAAE;YAC5C,IAAI;gBACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,GAAG,CAAC,eAAe,IAAI,EAAE,CAAC,CAAC;gBAClD,OAAO,IAAI,CAAC;aACb;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAC;aACb;QACH,CAAC,CAAC;QAEF,2BAAsB,GAAG,KAAK,EAAE,KAAe,EAAE,EAAE;YACjD,IAAI;gBACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,GAAG,CAAC,cAAc,EAAE;oBACzC,MAAM,EAAE;wBACN,EAAE,EAAE,KAAK;qBACV;oBACD,gBAAgB,EAAE,CAAC,MAAM,EAAE,EAAE,CAC3B,EAAE,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,WAAW,EAAE,QAAQ,EAAE,CAAC;iBAClD,CAAC,CAAC;gBACH,OAAO,IAAI,CAAC;aACb;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAC;aACb;QACH,CAAC,CAAC;QAEF,4BAAuB,GAAG,KAAK,EAAE,IAAY,EAAE,EAAE;YAC/C,IAAI;gBACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,GAAG,CAAC,kBAAkB,IAAI,EAAE,CAAC,CAAC;gBACrD,OAAO,IAAI,CAAC;aACb;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAC;aACb;QACH,CAAC,CAAC;QAEF,8BAAyB,GAAG,KAAK,EAAE,KAAe,EAAE,EAAE;YACpD,IAAI;gBACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,GAAG,CAAC,iBAAiB,EAAE;oBAC5C,MAAM,EAAE;wBACN,EAAE,EAAE,KAAK;qBACV;oBACD,gBAAgB,EAAE,CAAC,MAAM,EAAE,EAAE,CAC3B,EAAE,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,WAAW,EAAE,QAAQ,EAAE,CAAC;iBAClD,CAAC,CAAC;gBACH,OAAO,IAAI,CAAC;aACb;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAC;aACb;QACH,CAAC,CAAC;QAEF,4BAAuB,GAAG,KAAK,EAAE,IAAY,EAAE,EAAE;YAC/C,IAAI;gBACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,SAAS,EAAE;oBACrC,KAAK,EAAE,IAAI;iBACZ,CAAC,CAAC;gBACH,OAAO,IAAI,CAAC;aACb;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAC;aACb;QACH,CAAC,CAAC;QAEF,6BAAwB,GAAG,KAAK,EAAE,QAAgB,EAAE,EAAE;YACpD,IAAI;gBACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,GAAG,CAAC,eAAe,QAAQ,UAAU,CAAC,CAAC;gBAC9D,OAAO,IAAI,CAAC;aACb;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAC;aACb;QACH,CAAC,CAAC;IACJ,CAAC;CAAA;AAED,MAAM,CAAC,MAAM,cAAc,GAAG,IAAI,cAAc,EAAE,CAAC\"}","dts":{"name":"/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/TransactionAPI.d.ts","writeByteOrderMark":false,"text":"declare class TransactionAPI {\r\n    getTransactionByTxID: (txId: string) => Promise<any>;\r\n    getTransactionsByTxIDs: (txIDs: string[]) => Promise<any>;\r\n    getRawTransactionByTxID: (txID: string) => Promise<any>;\r\n    getRawTransactionsByTxIDs: (txIDs: string[]) => Promise<any>;\r\n    broadcastRawTransaction: (hash: string) => Promise<any>;\r\n    getSpendStatusByOutpoint: (outpoint: string) => Promise<any>;\r\n}\r\nexport declare const transactionAPI: TransactionAPI;\r\nexport {};\r\n"}}
