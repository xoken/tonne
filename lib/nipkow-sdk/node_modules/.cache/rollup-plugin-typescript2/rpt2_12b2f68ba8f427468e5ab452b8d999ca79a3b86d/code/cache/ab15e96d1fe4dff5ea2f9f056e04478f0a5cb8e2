{"code":"import { bip32 } from 'bitcoinjs-lib';\r\nimport derivationPaths from './constants/derivationPaths';\r\nimport * as bip39 from 'bip39';\r\nclass Utils {\r\n    constructor() {\r\n        this.mnemonicToSeed = async (bip39Mnemonic, password) => {\r\n            return await bip39.mnemonicToSeed(bip39Mnemonic, password);\r\n        };\r\n        this.getSeedHex = (seed) => {\r\n            return seed.toString('hex');\r\n        };\r\n        this.getBIP32RootKeyFromSeedHex = (seed, network) => {\r\n            return bip32.fromBase58(seed, network);\r\n        };\r\n        this.getBIP32RootKeyBase58 = (bip32RootKey) => {\r\n            return bip32RootKey.toBase58();\r\n        };\r\n        this.getAccountExtendedPrivKey = (bip32ExtendedKey) => {\r\n            return bip32ExtendedKey.toBase58();\r\n        };\r\n        this.getAccountExtendedPubKey = (bip32ExtendedKey) => {\r\n            return bip32ExtendedKey.neutered().toBase58();\r\n        };\r\n        this.getDerivationPathAccount = () => {\r\n            const { purpose, coin, account } = derivationPaths.BITCOIN_SV.BIP44;\r\n            let path = 'm/';\r\n            path += purpose + \"'/\";\r\n            path += coin + \"'/\";\r\n            path += account + \"'/\";\r\n            return path;\r\n        };\r\n        this.codePointToName = (codePoints) => {\r\n            if (codePoints && codePoints.length > 0) {\r\n                let name = '';\r\n                for (let i = 0; i < codePoints.length; i++) {\r\n                    name += String.fromCodePoint(codePoints[i]);\r\n                }\r\n                return name;\r\n            }\r\n            return null;\r\n        };\r\n        this.satoshiToBSV = (satoshi) => {\r\n            if (satoshi)\r\n                return satoshi / 100000000;\r\n            return 0;\r\n        };\r\n    }\r\n    getCodePoint(name) {\r\n        const nameCodePoints = [];\r\n        for (let i = 0; i < name.length; i++) {\r\n            nameCodePoints.push(name.codePointAt(i));\r\n        }\r\n        return nameCodePoints;\r\n    }\r\n    // unique = (array, col) => [...new Set(array.map(() => col))];\r\n    // groupBy = (arr, col) => {\r\n    //   return arr.reduce((finalOutput, currVal) => {\r\n    //     if (!finalOutput[currVal[col]]) {\r\n    //       finalOutput[currVal[col]] = [];\r\n    //     }\r\n    //     finalOutput[currVal[col]].push(currVal);\r\n    //     return finalOutput;\r\n    //   }, {});\r\n    // };\r\n    // chunk = () => {};\r\n    arraysEqual(a, b) {\r\n        if (a === b)\r\n            return true;\r\n        if (a == null || b == null)\r\n            return false;\r\n        if (a.length !== b.length)\r\n            return false;\r\n        // If you don't care about the order of the elements inside\r\n        // the array, you should sort both arrays here.\r\n        // Please note that calling sort on an array will modify that array.\r\n        // you might want to clone your array first.\r\n        for (var i = 0; i < a.length; ++i) {\r\n            if (a[i] !== b[i])\r\n                return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\nexport default new Utils();\r\n//# sourceMappingURL=Utils.js.map","references":["/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/node_modules/bitcoinjs-lib/types/index.d.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/src/constants/derivationPaths.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/node_modules/bip39/types/index.d.ts"],"map":"{\"version\":3,\"file\":\"Utils.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/Utils.ts\"],\"names\":[],\"mappings\":\"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\"}"}
