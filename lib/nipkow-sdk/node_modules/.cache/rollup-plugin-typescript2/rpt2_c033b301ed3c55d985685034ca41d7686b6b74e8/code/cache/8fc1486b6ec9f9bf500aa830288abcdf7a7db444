{"code":"import { get, post, put, deleteR } from './httpClient';\r\nclass UserAPI {\r\n    constructor() {\r\n        this.addUser = async (username, firstName, lastName, email) => {\r\n            try {\r\n                const { data } = await post('user', {\r\n                    username,\r\n                    firstName,\r\n                    lastName,\r\n                    email,\r\n                });\r\n                return data;\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        };\r\n        this.getUser = async (username) => {\r\n            try {\r\n                const { data } = await get(`user/${username}`);\r\n                return data;\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        };\r\n        this.getCurrentUser = async () => {\r\n            try {\r\n                const { data } = await get('user');\r\n                return data;\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        };\r\n        this.updateUser = async (username, password, firstName, lastName, email, apiQuota, apiExpiryTime) => {\r\n            try {\r\n                const { data } = await put(`user/${username}`, {\r\n                    data: {\r\n                        password,\r\n                        firstName,\r\n                        lastName,\r\n                        email,\r\n                        apiQuota,\r\n                        apiExpiryTime: apiExpiryTime.getUTCDate(),\r\n                    },\r\n                });\r\n                return data;\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        };\r\n        this.deleteUser = async (username) => {\r\n            try {\r\n                const { data } = await deleteR(`user/${username}`);\r\n                return data;\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        };\r\n    }\r\n}\r\nexport const userAPI = new UserAPI();\r\n//# sourceMappingURL=UserAPI.js.map","references":["/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/src/httpClient.ts"],"map":"{\"version\":3,\"file\":\"UserAPI.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/UserAPI.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,cAAc,CAAC;AAEvD,MAAM,OAAO;IAAb;QACE,YAAO,GAAG,KAAK,EACb,QAAgB,EAChB,SAAiB,EACjB,QAAgB,EAChB,KAAa,EACb,EAAE;YACF,IAAI;gBACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,IAAI,CAAC,MAAM,EAAE;oBAClC,QAAQ;oBACR,SAAS;oBACT,QAAQ;oBACR,KAAK;iBACN,CAAC,CAAC;gBACH,OAAO,IAAI,CAAC;aACb;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAC;aACb;QACH,CAAC,CAAC;QAEF,YAAO,GAAG,KAAK,EAAE,QAAgB,EAAE,EAAE;YACnC,IAAI;gBACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,GAAG,CAAC,QAAQ,QAAQ,EAAE,CAAC,CAAC;gBAC/C,OAAO,IAAI,CAAC;aACb;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAC;aACb;QACH,CAAC,CAAC;QAEF,mBAAc,GAAG,KAAK,IAAI,EAAE;YAC1B,IAAI;gBACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,GAAG,CAAC,MAAM,CAAC,CAAC;gBACnC,OAAO,IAAI,CAAC;aACb;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAC;aACb;QACH,CAAC,CAAC;QAEF,eAAU,GAAG,KAAK,EAChB,QAAgB,EAChB,QAAgB,EAChB,SAAiB,EACjB,QAAgB,EAChB,KAAa,EACb,QAAgB,EAChB,aAAmB,EACnB,EAAE;YACF,IAAI;gBACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,GAAG,CAAC,QAAQ,QAAQ,EAAE,EAAE;oBAC7C,IAAI,EAAE;wBACJ,QAAQ;wBACR,SAAS;wBACT,QAAQ;wBACR,KAAK;wBACL,QAAQ;wBACR,aAAa,EAAE,aAAa,CAAC,UAAU,EAAE;qBAC1C;iBACF,CAAC,CAAC;gBACH,OAAO,IAAI,CAAC;aACb;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAC;aACb;QACH,CAAC,CAAC;QAEF,eAAU,GAAG,KAAK,EAAE,QAAgB,EAAE,EAAE;YACtC,IAAI;gBACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,OAAO,CAAC,QAAQ,QAAQ,EAAE,CAAC,CAAC;gBACnD,OAAO,IAAI,CAAC;aACb;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAC;aACb;QACH,CAAC,CAAC;IACJ,CAAC;CAAA;AAED,MAAM,CAAC,MAAM,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC\"}","dts":{"name":"/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/UserAPI.d.ts","writeByteOrderMark":false,"text":"declare class UserAPI {\r\n    addUser: (username: string, firstName: string, lastName: string, email: string) => Promise<any>;\r\n    getUser: (username: string) => Promise<any>;\r\n    getCurrentUser: () => Promise<any>;\r\n    updateUser: (username: string, password: string, firstName: string, lastName: string, email: string, apiQuota: number, apiExpiryTime: Date) => Promise<any>;\r\n    deleteUser: (username: string) => Promise<any>;\r\n}\r\nexport declare const userAPI: UserAPI;\r\nexport {};\r\n"}}
