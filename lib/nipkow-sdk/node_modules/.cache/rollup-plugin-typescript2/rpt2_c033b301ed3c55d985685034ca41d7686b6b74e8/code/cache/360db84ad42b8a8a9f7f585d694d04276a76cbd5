{"code":"import PouchDB from 'pouchdb-browser';\r\nimport MemoryAdapter from 'pouchdb-adapter-memory';\r\nimport pouchdbFind from 'pouchdb-find';\r\nimport CryptoJS from 'crypto-js';\r\nimport AES from 'crypto-js/aes';\r\nPouchDB.plugin(MemoryAdapter);\r\nPouchDB.plugin(pouchdbFind);\r\nlet profiles;\r\nlet db;\r\nlet credentials;\r\nexport const BIP32_EXTENDED_KEY = 'bip32ExtendedKey';\r\nconst get = async (db, key) => await db.get(key);\r\nconst set = async (db, key, value) => {\r\n    const doc = await db.get(key);\r\n    for (const prop in value) {\r\n        doc[prop] = value[prop];\r\n    }\r\n    await db.put(doc);\r\n};\r\nexport const init = async (dbName) => {\r\n    db = new PouchDB(`${dbName}`, {\r\n        revs_limit: 1,\r\n        auto_compaction: true,\r\n    });\r\n    credentials = new PouchDB('credentials', {\r\n        revs_limit: 1,\r\n        auto_compaction: true,\r\n    });\r\n    await credentials.bulkDocs([{ _id: BIP32_EXTENDED_KEY, value: null }]);\r\n};\r\nexport const createProfile = async (cryptedMnemonic, profileName) => {\r\n    const newProfile = { cryptedMnemonic, name: profileName };\r\n    try {\r\n        const existingProfiles = await profiles.get('profiles');\r\n        if (existingProfiles &&\r\n            existingProfiles.value &&\r\n            existingProfiles.value instanceof Array) {\r\n            existingProfiles.value = [...existingProfiles.value, newProfile];\r\n            await profiles.put(existingProfiles);\r\n        }\r\n        else {\r\n            await profiles.put({\r\n                _id: 'profiles',\r\n                value: [newProfile],\r\n            });\r\n        }\r\n    }\r\n    catch (error) {\r\n        await profiles.put({\r\n            _id: 'profiles',\r\n            value: [newProfile],\r\n        });\r\n    }\r\n};\r\nexport const updateProfileName = async (currentProfileName, newProfileName) => {\r\n    try {\r\n        const existingProfiles = await profiles.get('profiles', {\r\n            revs: true,\r\n        });\r\n        const profileIndex = existingProfiles.value.findIndex((profile) => profile.name === currentProfileName);\r\n        const profilesArray = existingProfiles.value;\r\n        profilesArray[profileIndex].name = newProfileName;\r\n        await profiles.put({\r\n            _id: 'profiles',\r\n            _rev: existingProfiles._rev,\r\n            value: profilesArray,\r\n        });\r\n    }\r\n    catch (error) {\r\n        throw error;\r\n    }\r\n};\r\nexport const getProfiles = async () => {\r\n    try {\r\n        profiles = new PouchDB('Profiles', {\r\n            revs_limit: 1,\r\n            auto_compaction: true,\r\n        });\r\n        const existingProfiles = await profiles.get('profiles');\r\n        if (existingProfiles &&\r\n            existingProfiles.value &&\r\n            existingProfiles.value instanceof Array) {\r\n            const profileNames = existingProfiles.value.map((existingProfile) => existingProfile);\r\n            return profileNames;\r\n        }\r\n        else {\r\n            return [];\r\n        }\r\n    }\r\n    catch (error) {\r\n        return [];\r\n    }\r\n};\r\nexport const login = async (profile, password) => {\r\n    const existingProfiles = await getProfiles();\r\n    const selectedProfile = existingProfiles.find((existingProfile) => existingProfile.name === profile);\r\n    if (selectedProfile) {\r\n        const bip39Mnemonic = AES.decrypt(selectedProfile.cryptedMnemonic, password).toString(CryptoJS.enc.Utf8);\r\n        if (bip39Mnemonic) {\r\n            return bip39Mnemonic;\r\n        }\r\n        else {\r\n            throw new Error('Login error');\r\n        }\r\n    }\r\n    else {\r\n        throw new Error(\"Account Doesn't exist\");\r\n    }\r\n};\r\nexport const getBip32ExtendedKey = async () => {\r\n    const bip32ExtendedKeyDoc = await get(credentials, BIP32_EXTENDED_KEY);\r\n    return bip32ExtendedKeyDoc.value;\r\n};\r\nexport const setBip32ExtendedKey = async (value) => await set(credentials, BIP32_EXTENDED_KEY, { value });\r\nexport const getDerivedKeys = async () => {\r\n    const response = await db.allDocs({\r\n        include_docs: true,\r\n        startkey: 'key',\r\n        endkey: 'key\\ufff0',\r\n    });\r\n    if (response && response.rows.length > 0) {\r\n        const existingDerivedKeys = response.rows.map((row) => row.doc);\r\n        return { existingDerivedKeys };\r\n    }\r\n    else {\r\n        return { existingDerivedKeys: [] };\r\n    }\r\n};\r\nexport const upsertDerivedKeys = async (keys) => {\r\n    if (keys.length > 0) {\r\n        const { existingDerivedKeys } = await getDerivedKeys();\r\n        let keyId = existingDerivedKeys.length - 1;\r\n        const docs = keys.map((key, index) => {\r\n            if (!key._id) {\r\n                keyId = keyId + 1;\r\n            }\r\n            return {\r\n                _id: key._id ? key._id : `key-${String(keyId).padStart(20, '0')}`,\r\n                ...key,\r\n            };\r\n        });\r\n        await db.bulkDocs(docs);\r\n    }\r\n};\r\nexport const getOutputs = async (options) => {\r\n    const response = await db.allDocs({\r\n        include_docs: true,\r\n        ...options,\r\n        startkey: options?.startkey || 'output',\r\n        endkey: 'output\\ufff0',\r\n        skip: options?.startkey ? 1 : false,\r\n    });\r\n    if (response && response.rows.length > 0) {\r\n        const nextOutputsCursor = response.rows[response.rows.length - 1].id;\r\n        const outputs = response.rows.map((row) => row.doc);\r\n        return { nextOutputsCursor, outputs };\r\n    }\r\n    else {\r\n        return { nextOutputsCursor: null, outputs: [] };\r\n    }\r\n};\r\nexport const getOutputsLastFetched = async () => {\r\n    try {\r\n        const doc = await db.get('lastFetched');\r\n        return {\r\n            lastFetched: doc.value,\r\n            doc,\r\n        };\r\n    }\r\n    catch (error) {\r\n        return { lastFetched: null };\r\n        // throw error;\r\n    }\r\n};\r\nexport const getOutputsLastUpdated = async () => {\r\n    try {\r\n        const doc = await db.get('lastUpdated');\r\n        return {\r\n            lastUpdated: doc.value,\r\n            doc,\r\n        };\r\n    }\r\n    catch (error) {\r\n        throw error;\r\n    }\r\n};\r\nexport const upsertOutputs = async (outputs) => {\r\n    if (outputs.length > 0) {\r\n        const { outputs: existingOutputs } = await getOutputs();\r\n        let outputId = existingOutputs.length - 1;\r\n        const docs = outputs.map((output, index) => {\r\n            if (!output._id) {\r\n                outputId = outputId + 1;\r\n            }\r\n            return {\r\n                _id: `output-${String(outputId).padStart(20, '0')}`,\r\n                isSpent: output.spendInfo ? true : false,\r\n                confirmed: true,\r\n                ...output,\r\n            };\r\n        });\r\n        docs.push({\r\n            _id: 'lastFetched',\r\n            value: new Date(),\r\n        });\r\n        docs.push({\r\n            _id: 'lastUpdated',\r\n            value: null,\r\n        });\r\n        await db.bulkDocs(docs);\r\n    }\r\n};\r\nexport const updateOutputs = async (outputs) => {\r\n    const updateDoc = [];\r\n    for (let index = 0; index < outputs.length; index++) {\r\n        const element = outputs[index];\r\n        const outputDoc = await db.get(element._id);\r\n        updateDoc.push({ ...element, _rev: outputDoc._rev });\r\n    }\r\n    const { doc } = await getOutputsLastUpdated();\r\n    updateDoc.push({\r\n        _id: 'lastUpdated',\r\n        _rev: doc._rev,\r\n        value: new Date(),\r\n    });\r\n    try {\r\n        const results = await db.bulkDocs(updateDoc);\r\n        results.forEach((result) => {\r\n            if (result.error) {\r\n                throw new Error('Error in updating utxos');\r\n            }\r\n        });\r\n    }\r\n    catch (error) {\r\n        throw error;\r\n    }\r\n};\r\nexport const isInOutputs = async (output) => {\r\n    await db.createIndex({\r\n        index: { fields: ['outputTxHash', 'outputIndex', 'spendInfo'] },\r\n    });\r\n    const outputDoc = await db.find({\r\n        selector: {\r\n            outputTxHash: { $eq: output.outputTxHash },\r\n            outputIndex: { $eq: output.outputIndex },\r\n        },\r\n    });\r\n    if (outputDoc.docs.length > 0)\r\n        return true;\r\n    return false;\r\n};\r\nexport const isInOutputsNew = async (output) => {\r\n    await db.createIndex({\r\n        index: { fields: ['outputTxHash', 'outputIndex'] },\r\n    });\r\n    const outputDoc = await db.find({\r\n        selector: {\r\n            outputTxHash: { $eq: output.outputTxHash },\r\n            outputIndex: { $eq: output.outputIndex },\r\n        },\r\n    });\r\n    if (outputDoc.docs.length > 0)\r\n        return {\r\n            isPresent: true,\r\n            _id: outputDoc.docs[0]._id,\r\n            _rev: outputDoc.docs[0]._rev,\r\n        };\r\n    return { isPresent: false, _id: null, _rev: null };\r\n};\r\nexport const getTransactions = async (options) => {\r\n    const response = await db.allDocs({\r\n        include_docs: true,\r\n        ...options,\r\n        startkey: options?.startkey || 'transaction',\r\n        endkey: 'transaction\\ufff0',\r\n        skip: options?.startkey ? 1 : false,\r\n    });\r\n    if (response && response.rows.length > 0) {\r\n        let nextTransactionCursor;\r\n        if (response.rows.length === options?.limit) {\r\n            nextTransactionCursor = response.rows[response.rows.length - 1].id;\r\n        }\r\n        else {\r\n            nextTransactionCursor = null;\r\n        }\r\n        const transactions = response.rows.map((row) => row.doc);\r\n        return { nextTransactionCursor, transactions };\r\n    }\r\n    else {\r\n        return { nextTransactionCursor: null, transactions: [] };\r\n    }\r\n};\r\nexport const upsertTransactions = async (transactions) => {\r\n    if (transactions.length > 0) {\r\n        const { transactions: existingTransactions } = await getTransactions();\r\n        let txId = existingTransactions.length - 1;\r\n        const docs = transactions.map((transaction, index) => {\r\n            if (!transaction._id) {\r\n                txId = txId + 1;\r\n            }\r\n            return {\r\n                _id: transaction._id\r\n                    ? transaction._id\r\n                    : `transaction-${String(txId).padStart(20, '0')}`,\r\n                ...transaction,\r\n            };\r\n        });\r\n        await db.bulkDocs(docs);\r\n    }\r\n};\r\nexport const upsertUnconfirmedTransactions = async (transactions) => {\r\n    if (transactions.length > 0) {\r\n        const { unconfirmedTransactions: existingUnconfirmedTransactions, } = await getUnconfirmedTransactions();\r\n        let txId = existingUnconfirmedTransactions.length - 1;\r\n        const docs = transactions.map((transaction, index) => {\r\n            if (!transaction._id) {\r\n                txId = txId + 1;\r\n            }\r\n            return {\r\n                _id: transaction._id\r\n                    ? transaction._id\r\n                    : `unconfirmedTransaction-${String(txId).padStart(20, '0')}`,\r\n                ...transaction,\r\n            };\r\n        });\r\n        await db.bulkDocs(docs);\r\n    }\r\n};\r\nexport const deleteUnconfirmedTx = async (transactions) => {\r\n    if (transactions.length > 0) {\r\n        const docs = transactions.map((transaction, index) => {\r\n            return {\r\n                ...transaction,\r\n                _deleted: true,\r\n            };\r\n        });\r\n        await db.bulkDocs(docs);\r\n    }\r\n};\r\nexport const getUnconfirmedTransactions = async () => {\r\n    const response = await db.allDocs({\r\n        include_docs: true,\r\n        startkey: 'unconfirmedTransaction',\r\n        endkey: 'unconfirmedTransaction\\ufff0',\r\n    });\r\n    if (response && response.rows.length > 0) {\r\n        const unconfirmedTransactions = response.rows.map((row) => row.doc);\r\n        return { unconfirmedTransactions };\r\n    }\r\n    else {\r\n        return { unconfirmedTransactions: [] };\r\n    }\r\n};\r\nexport const getUTXOs = async (options) => {\r\n    await db.createIndex({\r\n        index: { fields: ['isSpent'] },\r\n    });\r\n    const outputDoc = await db.find({\r\n        selector: {\r\n            isSpent: { $eq: false },\r\n        },\r\n    });\r\n    if (outputDoc.docs.length > 0)\r\n        return { utxos: outputDoc.docs };\r\n    return { utxos: [] };\r\n};\r\nexport const isInUTXOs = async (output) => {\r\n    await db.createIndex({\r\n        index: { fields: ['outputTxHash', 'outputIndex', 'isSpent'] },\r\n    });\r\n    const outputDoc = await db.find({\r\n        selector: {\r\n            outputTxHash: { $eq: output.outputTxHash },\r\n            outputIndex: { $eq: output.outputIndex },\r\n            isSpent: false,\r\n        },\r\n    });\r\n    if (outputDoc.docs.length > 0)\r\n        return true;\r\n    return false;\r\n};\r\nexport const destroy = async () => {\r\n    try {\r\n        await db.viewCleanup();\r\n        await credentials.destroy();\r\n        db = null;\r\n        credentials = null;\r\n        return true;\r\n    }\r\n    catch (error) {\r\n        throw error;\r\n    }\r\n};\r\nexport const runScript = async () => {\r\n    try {\r\n        const doc = await db.get('output-00000000000000000000');\r\n        doc.isSpent = true;\r\n        await db.put(doc);\r\n    }\r\n    catch (error) {\r\n        throw error;\r\n    }\r\n};\r\n//# sourceMappingURL=Persist.js.map","references":["/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/node_modules/@types/pouchdb-browser/index.d.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/node_modules/@types/pouchdb-adapter-memory/index.d.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/node_modules/@types/pouchdb-find/index.d.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/node_modules/@types/crypto-js/index.d.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/node_modules/@types/crypto-js/aes/index.d.ts"],"map":"{\"version\":3,\"file\":\"Persist.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/Persist.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/Persist.d.ts","writeByteOrderMark":false,"text":"export declare const BIP32_EXTENDED_KEY = \"bip32ExtendedKey\";\r\nexport declare const init: (dbName: string) => Promise<void>;\r\nexport declare const createProfile: (cryptedMnemonic: string, profileName: string) => Promise<void>;\r\nexport declare const updateProfileName: (currentProfileName: string, newProfileName: string) => Promise<void>;\r\nexport declare const getProfiles: () => Promise<any>;\r\nexport declare const login: (profile: string, password: string) => Promise<string>;\r\nexport declare const getBip32ExtendedKey: () => Promise<any>;\r\nexport declare const setBip32ExtendedKey: (value: any) => Promise<void>;\r\nexport declare const getDerivedKeys: () => Promise<{\r\n    existingDerivedKeys: any;\r\n}>;\r\nexport declare const upsertDerivedKeys: (keys: any) => Promise<void>;\r\nexport declare const getOutputs: (options?: {\r\n    startkey?: string | undefined;\r\n    limit?: number | undefined;\r\n    diff?: boolean | undefined;\r\n} | undefined) => Promise<{\r\n    nextOutputsCursor: any;\r\n    outputs: any;\r\n}>;\r\nexport declare const getOutputsLastFetched: () => Promise<{\r\n    lastFetched: any;\r\n    doc: any;\r\n} | {\r\n    lastFetched: null;\r\n    doc?: undefined;\r\n}>;\r\nexport declare const getOutputsLastUpdated: () => Promise<{\r\n    lastUpdated: any;\r\n    doc: any;\r\n}>;\r\nexport declare const upsertOutputs: (outputs: any) => Promise<void>;\r\nexport declare const updateOutputs: (outputs: any) => Promise<void>;\r\nexport declare const isInOutputs: (output: {\r\n    outputTxHash: string;\r\n    outputIndex: number;\r\n    spendInfo: object;\r\n}) => Promise<boolean>;\r\nexport declare const isInOutputsNew: (output: {\r\n    outputTxHash: string;\r\n    outputIndex: number;\r\n}) => Promise<{\r\n    isPresent: boolean;\r\n    _id: any;\r\n    _rev: any;\r\n}>;\r\nexport declare const getTransactions: (options?: {\r\n    startkey?: string | undefined;\r\n    limit?: number | undefined;\r\n    diff?: boolean | undefined;\r\n} | undefined) => Promise<{\r\n    nextTransactionCursor: any;\r\n    transactions: any;\r\n}>;\r\nexport declare const upsertTransactions: (transactions: any[]) => Promise<void>;\r\nexport declare const upsertUnconfirmedTransactions: (transactions: any[]) => Promise<void>;\r\nexport declare const deleteUnconfirmedTx: (transactions: any) => Promise<void>;\r\nexport declare const getUnconfirmedTransactions: () => Promise<{\r\n    unconfirmedTransactions: any;\r\n}>;\r\nexport declare const getUTXOs: (options?: {\r\n    startkey?: string | undefined;\r\n    limit?: number | undefined;\r\n    diff?: boolean | undefined;\r\n} | undefined) => Promise<{\r\n    utxos: any;\r\n}>;\r\nexport declare const isInUTXOs: (output: {\r\n    outputTxHash: string;\r\n    outputIndex: number;\r\n}) => Promise<boolean>;\r\nexport declare const destroy: () => Promise<boolean>;\r\nexport declare const runScript: () => Promise<void>;\r\n"}}
