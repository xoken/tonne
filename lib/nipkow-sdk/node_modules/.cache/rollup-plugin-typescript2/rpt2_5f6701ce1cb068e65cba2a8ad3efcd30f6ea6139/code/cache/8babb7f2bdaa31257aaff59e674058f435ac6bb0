{"code":"import { get } from './httpClient';\r\nimport Qs from 'qs';\r\nclass ScriptHashAPI {\r\n    constructor() {\r\n        this.getOutputsByScriptHash = async (scriptHash, pagesize) => {\r\n            try {\r\n                const { data } = await get(`scripthash/${scriptHash}/outputs`, {\r\n                    params: {\r\n                        pagesize,\r\n                    },\r\n                });\r\n                return data;\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        };\r\n        this.getOutputsByScriptHashes = async (scriptHashes) => {\r\n            try {\r\n                const { data } = await get(`scripthashes/outputs/`, {\r\n                    params: {\r\n                        scripthash: scriptHashes,\r\n                    },\r\n                    paramsSerializer: (params) => Qs.stringify(params, { arrayFormat: 'repeat' }),\r\n                });\r\n                return data;\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        };\r\n        this.getUTXOsByScriptHash = async (scriptHash, pagesize) => {\r\n            try {\r\n                const { data } = await get(`scripthash/${scriptHash}/utxos`, {\r\n                    params: {\r\n                        pagesize,\r\n                    },\r\n                });\r\n                return data;\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        };\r\n        this.getUTXOsByScriptHashes = async (scriptHashes) => {\r\n            try {\r\n                const { data } = await get(`scripthashes/utxos`, {\r\n                    params: {\r\n                        scripthash: scriptHashes,\r\n                    },\r\n                    paramsSerializer: (params) => Qs.stringify(params, { arrayFormat: 'repeat' }),\r\n                });\r\n                return data;\r\n            }\r\n            catch (error) {\r\n                throw error;\r\n            }\r\n        };\r\n    }\r\n}\r\nexport const scriptHashAPI = new ScriptHashAPI();\r\n//# sourceMappingURL=ScriptHashAPI.js.map","references":["/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/src/httpClient.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/node_modules/@types/qs/index.d.ts"],"map":"{\"version\":3,\"file\":\"ScriptHashAPI.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/ScriptHashAPI.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,GAAG,EAAE,MAAM,cAAc,CAAC;AACnC,OAAO,EAAE,MAAM,IAAI,CAAC;AAEpB,MAAM,aAAa;IAAnB;QACE,2BAAsB,GAAG,KAAK,EAAE,UAAkB,EAAE,QAAiB,EAAE,EAAE;YACvE,IAAI;gBACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,GAAG,CAAC,cAAc,UAAU,UAAU,EAAE;oBAC7D,MAAM,EAAE;wBACN,QAAQ;qBACT;iBACF,CAAC,CAAC;gBACH,OAAO,IAAI,CAAC;aACb;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAC;aACb;QACH,CAAC,CAAC;QAEF,6BAAwB,GAAG,KAAK,EAAE,YAAsB,EAAE,EAAE;YAC1D,IAAI;gBACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,GAAG,CAAC,uBAAuB,EAAE;oBAClD,MAAM,EAAE;wBACN,UAAU,EAAE,YAAY;qBACzB;oBACD,gBAAgB,EAAE,CAAC,MAAM,EAAE,EAAE,CAC3B,EAAE,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,WAAW,EAAE,QAAQ,EAAE,CAAC;iBAClD,CAAC,CAAC;gBACH,OAAO,IAAI,CAAC;aACb;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAC;aACb;QACH,CAAC,CAAC;QAEF,yBAAoB,GAAG,KAAK,EAAE,UAAkB,EAAE,QAAiB,EAAE,EAAE;YACrE,IAAI;gBACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,GAAG,CAAC,cAAc,UAAU,QAAQ,EAAE;oBAC3D,MAAM,EAAE;wBACN,QAAQ;qBACT;iBACF,CAAC,CAAC;gBACH,OAAO,IAAI,CAAC;aACb;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAC;aACb;QACH,CAAC,CAAC;QAEF,2BAAsB,GAAG,KAAK,EAAE,YAAsB,EAAE,EAAE;YACxD,IAAI;gBACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,GAAG,CAAC,oBAAoB,EAAE;oBAC/C,MAAM,EAAE;wBACN,UAAU,EAAE,YAAY;qBACzB;oBACD,gBAAgB,EAAE,CAAC,MAAM,EAAE,EAAE,CAC3B,EAAE,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,WAAW,EAAE,QAAQ,EAAE,CAAC;iBAClD,CAAC,CAAC;gBACH,OAAO,IAAI,CAAC;aACb;YAAC,OAAO,KAAK,EAAE;gBACd,MAAM,KAAK,CAAC;aACb;QACH,CAAC,CAAC;IACJ,CAAC;CAAA;AAED,MAAM,CAAC,MAAM,aAAa,GAAG,IAAI,aAAa,EAAE,CAAC\"}"}
