{"code":"import https from 'https';\r\nimport axios from 'axios';\r\nlet httpReq;\r\nexport const init = (host, port) => {\r\n    httpReq = axios.create({\r\n        baseURL: `https://${host}:${port}/v1`,\r\n        httpsAgent: new https.Agent({\r\n            rejectUnauthorized: false,\r\n        }),\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n    });\r\n    httpReq.interceptors.request.use((config) => {\r\n        const token = localStorage.getItem('sessionKey');\r\n        config.headers.Authorization = token ? `Bearer ${token}` : '';\r\n        return config;\r\n    }, (error) => {\r\n        console.log(error);\r\n        return Promise.reject(error);\r\n    });\r\n    httpReq.interceptors.response.use((response) => {\r\n        return response;\r\n    }, async (error) => {\r\n        if (error && error.response && error.response.status === 403) {\r\n            try {\r\n                const userName = localStorage.getItem('userName');\r\n                const password = localStorage.getItem('password');\r\n                const { data: { auth: { sessionKey }, }, } = await post('auth', { userName, password });\r\n                if (sessionKey) {\r\n                    localStorage.setItem('sessionKey', sessionKey);\r\n                    Promise.resolve();\r\n                }\r\n                else {\r\n                    throw new Error('Invalid sessionKey');\r\n                }\r\n            }\r\n            catch (error) {\r\n                return Promise.reject(error);\r\n            }\r\n        }\r\n        else {\r\n            return new Promise((resolve, reject) => {\r\n                reject(error);\r\n            });\r\n        }\r\n    });\r\n};\r\nexport const get = async (url, config) => {\r\n    try {\r\n        const response = await httpReq.get(url, config);\r\n        return response;\r\n    }\r\n    catch (error) {\r\n        throw error;\r\n    }\r\n};\r\nexport const post = async (url, data, config) => {\r\n    try {\r\n        const response = await httpReq.post(url, data, config);\r\n        return response;\r\n    }\r\n    catch (error) {\r\n        throw error;\r\n    }\r\n};\r\nexport const put = async (url, data, config) => {\r\n    try {\r\n        const response = await httpReq.put(url, data, config);\r\n        return response;\r\n    }\r\n    catch (error) {\r\n        throw error;\r\n    }\r\n};\r\nexport const deleteR = async (url, config) => {\r\n    try {\r\n        const response = await httpReq.delete(url, config);\r\n        return response;\r\n    }\r\n    catch (error) {\r\n        throw error;\r\n    }\r\n};\r\n//# sourceMappingURL=httpClient.js.map","references":["/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/node_modules/axios/index.d.ts"],"map":"{\"version\":3,\"file\":\"httpClient.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/httpClient.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/httpClient.d.ts","writeByteOrderMark":false,"text":"import { AxiosRequestConfig } from 'axios';\r\nexport declare const init: (host: string, port: number) => void;\r\nexport declare const get: (url: string, config?: AxiosRequestConfig | undefined) => Promise<import(\"axios\").AxiosResponse<any>>;\r\nexport declare const post: (url: string, data?: any, config?: AxiosRequestConfig | undefined) => Promise<import(\"axios\").AxiosResponse<any>>;\r\nexport declare const put: (url: string, data?: any, config?: AxiosRequestConfig | undefined) => Promise<import(\"axios\").AxiosResponse<any>>;\r\nexport declare const deleteR: (url: string, config?: AxiosRequestConfig | undefined) => Promise<import(\"axios\").AxiosResponse<any>>;\r\n"}}
