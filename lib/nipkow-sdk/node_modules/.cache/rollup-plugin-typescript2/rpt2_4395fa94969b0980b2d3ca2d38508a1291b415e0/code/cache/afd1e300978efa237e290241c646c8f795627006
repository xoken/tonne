{"code":"import { bip32, ECPair, networks, payments, Psbt, } from 'bitcoinjs-lib';\r\nimport AES from 'crypto-js/aes';\r\nimport coinSelect from 'coinselect';\r\nimport faker from 'faker';\r\nimport * as bip39 from 'bip39';\r\nimport * as _ from 'lodash';\r\nimport { differenceInMinutes } from 'date-fns';\r\nimport { decodeCBORData, getAllegoryType, ProducerAction, ProducerExtension, } from './Allegory';\r\nimport * as Persist from './Persist';\r\nimport derivationPaths from './constants/derivationPaths';\r\nimport network from './constants/network';\r\nimport { addressAPI } from './AddressAPI';\r\nimport { transactionAPI } from './TransactionAPI';\r\nimport { chainAPI } from './ChainAPI';\r\nimport utils from './Utils';\r\nimport { post } from './httpClient';\r\nclass Wallet {\r\n    constructor() {\r\n        this.getBIP32ExtendedPrivKey = (bip32ExtendedKey) => {\r\n            const bip32Interface = bip32.fromBase58(bip32ExtendedKey, network.BITCOIN_SV_REGTEST);\r\n            let xprvkeyB58 = 'NA';\r\n            if (!bip32Interface.isNeutered()) {\r\n                xprvkeyB58 = bip32Interface.toBase58();\r\n            }\r\n            return xprvkeyB58;\r\n        };\r\n        this.getBIP32ExtendedPubKey = (bip32ExtendedKey) => {\r\n            const bip32Interface = bip32.fromBase58(bip32ExtendedKey, network.BITCOIN_SV_REGTEST);\r\n            return bip32Interface.neutered().toBase58();\r\n        };\r\n    }\r\n    async _initWallet(bip39Mnemonic, password) {\r\n        const seed = this._mnemonicToSeedSync(bip39Mnemonic, password);\r\n        const bip32RootKey = this._getBIP32RootKeyFromSeed(seed, network.BITCOIN_SV_REGTEST);\r\n        const bip32ExtendedKey = this._getBIP32ExtendedKey(derivationPaths.BITCOIN_SV_REGTEST.BIP44.derivationPath, bip32RootKey);\r\n        const nUTXOExtendedKey = this._getBIP32ExtendedKey(derivationPaths.BITCOIN_SV_REGTEST.BIP44.nUTXODerivationPath, bip32RootKey);\r\n        await Persist.setBip32ExtendedKey(bip32ExtendedKey);\r\n        await Persist.setNUTXOExtendedKey(nUTXOExtendedKey);\r\n        const { existingDerivedKeys } = await Persist.getDerivedKeys();\r\n        const countOfUnusedKeys = this._countOfUnusedKeys(existingDerivedKeys);\r\n        if (countOfUnusedKeys < 20) {\r\n            let lastKeyIndex = -1;\r\n            if (existingDerivedKeys.length > 0) {\r\n                lastKeyIndex = existingDerivedKeys[existingDerivedKeys.length - 1].indexText\r\n                    .split('/')\r\n                    .pop();\r\n            }\r\n            const { derivedKeys: newDerivedKeys } = await this.generateDerivedKeys(bip32ExtendedKey, derivationPaths.BITCOIN_SV_REGTEST.BIP44.derivationPath, Number(lastKeyIndex) + 1, 20 - countOfUnusedKeys, false);\r\n            await Persist.upsertDerivedKeys(newDerivedKeys);\r\n        }\r\n        const { existingNUTXODerivedKeys } = await Persist.getNUTXODerivedKeys();\r\n        const countOfUnusedNUTXOKeys = this._countOfUnusedKeys(existingNUTXODerivedKeys);\r\n        if (countOfUnusedNUTXOKeys < 20) {\r\n            let lastKeyIndex = -1;\r\n            if (existingNUTXODerivedKeys.length > 0) {\r\n                lastKeyIndex = existingNUTXODerivedKeys[existingNUTXODerivedKeys.length - 1].indexText\r\n                    .split('/')\r\n                    .pop();\r\n            }\r\n            const { derivedKeys: newDerivedKeys } = await this.generateDerivedKeys(nUTXOExtendedKey, derivationPaths.BITCOIN_SV_REGTEST.BIP44.nUTXODerivationPath, Number(lastKeyIndex) + 1, 20 - countOfUnusedNUTXOKeys, false);\r\n            await Persist.upsertNUTXODerivedKeys(newDerivedKeys);\r\n        }\r\n    }\r\n    _mnemonicToSeedSync(bip39Mnemonic, password) {\r\n        return bip39.mnemonicToSeedSync(bip39Mnemonic, password);\r\n    }\r\n    _getBIP32RootKeyFromSeed(seed, network) {\r\n        return bip32.fromSeed(seed, network).toBase58();\r\n    }\r\n    _getBIP32ExtendedKey(path, bip32RootKey) {\r\n        if (!bip32RootKey) {\r\n            return bip32RootKey;\r\n        }\r\n        let extendedKey = bip32.fromBase58(bip32RootKey, network.BITCOIN_SV_REGTEST);\r\n        const pathBits = path.split('/');\r\n        for (let i = 0; i < pathBits.length; i++) {\r\n            const bit = pathBits[i];\r\n            const index = parseInt(bit);\r\n            if (isNaN(index)) {\r\n                continue;\r\n            }\r\n            const hardened = bit[bit.length - 1] === \"'\";\r\n            if (hardened) {\r\n                extendedKey = extendedKey.deriveHardened(index);\r\n            }\r\n            else {\r\n                extendedKey = extendedKey.derive(index);\r\n            }\r\n        }\r\n        return extendedKey.toBase58();\r\n    }\r\n    _generateDerivedKeys(bip32ExtendedKey, derivationPath, index, useBip38, bip38password = '', useHardenedAddresses) {\r\n        const bip32Interface = bip32.fromBase58(bip32ExtendedKey, network.BITCOIN_SV_REGTEST);\r\n        let key;\r\n        if (useHardenedAddresses) {\r\n            key = bip32Interface.deriveHardened(index);\r\n        }\r\n        else {\r\n            key = bip32Interface.derive(index);\r\n        }\r\n        const useUncompressed = useBip38;\r\n        let keyPair = ECPair.fromPrivateKey(key.privateKey, {\r\n            network: network.BITCOIN_SV_REGTEST,\r\n        });\r\n        if (useUncompressed) {\r\n            keyPair = ECPair.fromPrivateKey(key.privateKey, {\r\n                compressed: false,\r\n                network: network.BITCOIN_SV_REGTEST,\r\n            });\r\n        }\r\n        const address = payments.p2pkh({\r\n            pubkey: keyPair.publicKey,\r\n            network: network.BITCOIN_SV_REGTEST,\r\n        }).address;\r\n        let indexText = derivationPath + '/' + index;\r\n        if (useHardenedAddresses) {\r\n            indexText = indexText + \"'\";\r\n        }\r\n        return { indexText, address };\r\n    }\r\n    _getPrivKey(bip32ExtendedKey, index, useBip38, bip38password = '', useHardenedAddresses) {\r\n        const bip32Interface = bip32.fromBase58(bip32ExtendedKey, network.BITCOIN_SV_REGTEST);\r\n        let key;\r\n        if (useHardenedAddresses) {\r\n            key = bip32Interface.deriveHardened(index);\r\n        }\r\n        else {\r\n            key = bip32Interface.derive(index);\r\n        }\r\n        const useUncompressed = useBip38;\r\n        let keyPair = ECPair.fromPrivateKey(key.privateKey, {\r\n            network: network.BITCOIN_SV_REGTEST,\r\n        });\r\n        if (useUncompressed) {\r\n            keyPair = ECPair.fromPrivateKey(key.privateKey, {\r\n                compressed: false,\r\n                network: network.BITCOIN_SV_REGTEST,\r\n            });\r\n        }\r\n        // const address = payments.p2pkh({\r\n        //   pubkey: keyPair.publicKey,\r\n        //   network: network.BITCOIN_SV_REGTEST,\r\n        // }).address!;\r\n        const hasPrivkey = !key.isNeutered();\r\n        let privkey = '';\r\n        if (hasPrivkey) {\r\n            privkey = keyPair.toWIF();\r\n            // if (useBip38) {\r\n            //   privkey = bip38.encrypt(keyPair.privateKey!, false, bip38password);\r\n            // }\r\n        }\r\n        // const pubkey = keyPair.publicKey.toString('hex');\r\n        // let indexText =\r\n        //   derivationPaths.BITCOIN_SV_REGTEST.BIP44.derivationPath + '/' + index;\r\n        // if (useHardenedAddresses) {\r\n        //   indexText = indexText + \"'\";\r\n        // }\r\n        // if (index === 0) {\r\n        //   return {\r\n        //     privkey: 'cQmNC5DxFdWhEqmzeWZ1Gk62hmLTai8vs9fvRVz2KsxKd9fYJTWH',\r\n        //   };\r\n        // }\r\n        return { privkey };\r\n    }\r\n    async generateDerivedKeys(bip32ExtendedKey, derivationPath, indexStart, count, useBip38, bip38password, useHardenedAddresses) {\r\n        const derivedKeys = [];\r\n        for (let i = indexStart; i < indexStart + count; i++) {\r\n            // if (i === 0) {\r\n            //   const derivedKey = { address: '', indexText: 'm/44/1/0/0/0' };\r\n            //   derivedKey.address = 'msWHgqiPB4dDe7MK455MvkNkixhCZsNKdy';\r\n            //   derivedKeys.push({ ...derivedKey, isUsed: false });\r\n            // } else {\r\n            const derivedKey = this._generateDerivedKeys(bip32ExtendedKey, derivationPath, i, useBip38, bip38password, useHardenedAddresses);\r\n            derivedKeys.push({ ...derivedKey, isUsed: false });\r\n            // }\r\n        }\r\n        return { derivedKeys };\r\n    }\r\n    _getAddressesFromKeys(derivedKeys) {\r\n        return derivedKeys.map((key) => key.address);\r\n    }\r\n    _countOfUnusedKeys(keys) {\r\n        return keys.reduce((acc, currKey) => {\r\n            if (!currKey.isUsed) {\r\n                acc = acc + 1;\r\n            }\r\n            return acc;\r\n        }, 0);\r\n    }\r\n    _removeDuplicate(outputs) {\r\n        const sortedOutputs = outputs.sort((output1, output2) => {\r\n            const a = output1.blockHeight !== null ? output1.blockHeight : 999999999;\r\n            const b = output2.blockHeight !== null ? output2.blockHeight : 999999999;\r\n            return b - a;\r\n        });\r\n        const unconfirmedOutputs = [];\r\n        for (let index = 0; index < sortedOutputs.length; index++) {\r\n            const output = sortedOutputs[index];\r\n            if (output.txIndex === null) {\r\n                unconfirmedOutputs.push(output);\r\n            }\r\n            else {\r\n                break;\r\n            }\r\n        }\r\n        if (unconfirmedOutputs.length > 0) {\r\n            const duplicateOutputs = sortedOutputs.splice(0, unconfirmedOutputs.length * 2);\r\n            const uniqueOutputs = duplicateOutputs.filter((element, index, self) => {\r\n                return (index ===\r\n                    self.findIndex((t) => t.outputTxHash === element.outputTxHash &&\r\n                        t.outputIndex === element.outputIndex));\r\n            });\r\n            return [...uniqueOutputs, ...sortedOutputs];\r\n        }\r\n        return sortedOutputs;\r\n    }\r\n    async processAllegoryTransactions(outputs, transactions) {\r\n        const allegoryTransactions = transactions.filter((transaction) => {\r\n            if (transaction.outputs.length > 0 &&\r\n                transaction.outputs[0].lockingScript.startsWith('006a0f416c6c65676f72792f416c6c506179')) {\r\n                return true;\r\n            }\r\n            return false;\r\n        });\r\n        const confirmedNamePurchaseTxs = [];\r\n        allegoryTransactions.forEach((allegoryTransaction) => {\r\n            const allegoryData = decodeCBORData(allegoryTransaction.outputs[0].lockingScript);\r\n            const allegory = getAllegoryType(allegoryData);\r\n            const { name, action } = allegory;\r\n            let producerExtensions = [];\r\n            if (action instanceof ProducerAction) {\r\n                const producerAction = action;\r\n                if (producerAction.extensions.length > 0) {\r\n                    producerExtensions = producerAction.extensions.map((extension) => {\r\n                        if (extension instanceof ProducerExtension) {\r\n                            return {\r\n                                codePoint: extension.codePoint,\r\n                                index: extension.producerOutputEx\r\n                                    .producer.index,\r\n                            };\r\n                        }\r\n                        else {\r\n                            return {\r\n                                codePoint: extension.codePoint,\r\n                                index: extension.ownerOutputEx.owner\r\n                                    .index,\r\n                            };\r\n                        }\r\n                    });\r\n                }\r\n            }\r\n            const producerCodePoints = producerExtensions?.map(({ codePoint }) => codePoint);\r\n            confirmedNamePurchaseTxs.push({\r\n                name: utils.codePointToName([...name, ...producerCodePoints]),\r\n                index: producerExtensions.length > 0 ? producerExtensions[0].index : null,\r\n                tx: allegoryTransaction,\r\n            });\r\n        });\r\n        const validConfirmedNamePurchaseTxs = [];\r\n        for (let index = 0; index < confirmedNamePurchaseTxs.length; index++) {\r\n            const confirmedNamePurchaseTx = confirmedNamePurchaseTxs[index];\r\n            const { name, tx: { txId }, } = confirmedNamePurchaseTx;\r\n            if (name) {\r\n                try {\r\n                    const { data } = await post('allegory/name-outpoint', {\r\n                        name: utils.getCodePoint(name),\r\n                        isProducer: false,\r\n                    });\r\n                    const { forName, isProducer, outPoint: { opIndex, opTxHash }, script, } = data;\r\n                    if (utils.codePointToName(forName) === name && txId === opTxHash) {\r\n                        validConfirmedNamePurchaseTxs.push(confirmedNamePurchaseTx);\r\n                    }\r\n                }\r\n                catch (error) { }\r\n            }\r\n        }\r\n        const updatedOutputs = outputs.map((output) => {\r\n            const nameOutput = validConfirmedNamePurchaseTxs.find((validConfirmedNamePurchaseTx) => {\r\n                return (output.outputTxHash === validConfirmedNamePurchaseTx.tx.txId &&\r\n                    output.outputIndex === validConfirmedNamePurchaseTx.index);\r\n            });\r\n            if (nameOutput) {\r\n                return {\r\n                    ...output,\r\n                    name: nameOutput.name,\r\n                    isNameOutpoint: true,\r\n                };\r\n            }\r\n            else {\r\n                return output;\r\n            }\r\n        });\r\n        return { outputs: updatedOutputs };\r\n    }\r\n    async getTransactions(options) {\r\n        const { existingDerivedKeys } = await Persist.getDerivedKeys();\r\n        const { existingNUTXODerivedKeys } = await Persist.getNUTXODerivedKeys();\r\n        const keys = [...existingDerivedKeys, ...existingNUTXODerivedKeys];\r\n        if (keys.length > 0) {\r\n            const { derivedKeys: newDerivedKeys, nUTXODerivedKeys: newNUTXODerivedKeys, diffOutputs: diffOutputsWithDuplicate, } = await this._getOutputs(keys);\r\n            if (diffOutputsWithDuplicate.length > 0) {\r\n                const diffOutputs = this._removeDuplicate(diffOutputsWithDuplicate);\r\n                const newKeys = [...newDerivedKeys, ...newNUTXODerivedKeys];\r\n                /* FIX: A Tx can be in spendInfo, and it may not appear in getOutputs API */\r\n                const spentOutputs = diffOutputs.filter((output) => {\r\n                    if (output.spendInfo)\r\n                        return true;\r\n                    return false;\r\n                });\r\n                const outgoingTxIds = Array.from(new Set(spentOutputs.map((output) => output.spendInfo.spendingTxId)));\r\n                const incomingTxIds = Array.from(new Set(diffOutputs.map((output) => output.outputTxHash)));\r\n                const txIds = Array.from(new Set([...incomingTxIds, ...outgoingTxIds]));\r\n                const { txs } = await this._getTransactions(txIds);\r\n                const { chainInfo } = await chainAPI.getChainInfo();\r\n                if (chainInfo) {\r\n                    const { chainTip } = chainInfo;\r\n                    if (txs.length > 0) {\r\n                        const sortedTx = txs.sort((tx1, tx2) => {\r\n                            return tx2.blockHeight - tx1.blockHeight;\r\n                        });\r\n                        const transactions = sortedTx.map((transaction) => {\r\n                            const { tx: { txInps, txOuts }, blockHeight, } = transaction;\r\n                            const newTxInps = txInps.map((input) => {\r\n                                const isMineAddress = newKeys.find((derivedKey) => derivedKey.address === input.address);\r\n                                const isNUTXOAddress = newNUTXODerivedKeys.find((derivedKey) => derivedKey.address === input.address);\r\n                                return {\r\n                                    address: input.address,\r\n                                    txInputIndex: input.txInputIndex,\r\n                                    value: input.value,\r\n                                    isMine: isMineAddress ? true : false,\r\n                                    isNUTXO: isNUTXOAddress ? true : false,\r\n                                };\r\n                            });\r\n                            const newTxOuts = txOuts.map((output) => {\r\n                                const isMineAddress = newKeys.find((derivedKey) => derivedKey.address === output.address);\r\n                                const isNUTXOAddress = newNUTXODerivedKeys.find((derivedKey) => derivedKey.address === output.address);\r\n                                return {\r\n                                    address: output.address,\r\n                                    lockingScript: output.lockingScript,\r\n                                    outputIndex: output.outputIndex,\r\n                                    value: output.value,\r\n                                    isMine: isMineAddress ? true : false,\r\n                                    isNUTXO: isNUTXOAddress ? true : false,\r\n                                };\r\n                            });\r\n                            const newTransaction = {\r\n                                txId: transaction.txId,\r\n                                inputs: newTxInps,\r\n                                outputs: newTxOuts,\r\n                            };\r\n                            return {\r\n                                ...newTransaction,\r\n                                confirmation: blockHeight ? chainTip - blockHeight : null,\r\n                            };\r\n                        });\r\n                        const { outputs: newDiffOutputs, } = await this.processAllegoryTransactions(diffOutputs, transactions);\r\n                        await Persist.upsertOutputs(newDiffOutputs);\r\n                        await Persist.upsertTransactions(transactions);\r\n                        await Persist.upsertDerivedKeys(newDerivedKeys);\r\n                        await Persist.upsertNUTXODerivedKeys(newNUTXODerivedKeys);\r\n                        if (options?.diff) {\r\n                            return { transactions };\r\n                        }\r\n                        else {\r\n                            return await Persist.getTransactions(options);\r\n                        }\r\n                    }\r\n                    else {\r\n                        throw new Error('Error in fetching transactions');\r\n                    }\r\n                }\r\n                else {\r\n                    throw new Error('Error in fetching transactions');\r\n                }\r\n            }\r\n            else {\r\n                if (options?.diff) {\r\n                    return { transactions: [] };\r\n                }\r\n                else {\r\n                    return await Persist.getTransactions(options);\r\n                }\r\n            }\r\n        }\r\n        return { transactions: [] };\r\n    }\r\n    async _getTransactions(txIds) {\r\n        const chunkedTxIds = _.chunk(txIds, 20);\r\n        const data = await Promise.all(chunkedTxIds.map(async (chunkedTxId) => {\r\n            return await transactionAPI.getTransactionsByTxIDs(chunkedTxId);\r\n        }));\r\n        const transactions = data.map((element) => element.txs).flat();\r\n        return { txs: transactions };\r\n    }\r\n    async _getOutputs(derivedKeys, prevDiffOutputs = [], prevKeys = []) {\r\n        const chunkedUsedDerivedKeys = _.chunk(derivedKeys, 20);\r\n        const outputsByAddresses = await Promise.all(chunkedUsedDerivedKeys.map(async (chunkedUsedDerivedKey) => {\r\n            return await this._getOutputsByAddresses(chunkedUsedDerivedKey);\r\n        }));\r\n        const diffOutputs = outputsByAddresses.flat();\r\n        const updatedKeys = derivedKeys.map((key) => {\r\n            if (!key.isUsed) {\r\n                const found = diffOutputs.some((output) => output.address === key.address);\r\n                return { ...key, isUsed: found };\r\n            }\r\n            return key;\r\n        });\r\n        const newDiffOutputs = [...prevDiffOutputs, ...diffOutputs];\r\n        const newKeys = [...prevKeys, ...updatedKeys];\r\n        const walletKeys = newKeys.filter((key) => {\r\n            return key.indexText.startsWith(derivationPaths.BITCOIN_SV_REGTEST.BIP44.derivationPath);\r\n        });\r\n        const nUTXOKeys = newKeys.filter((key) => {\r\n            return key.indexText.startsWith(derivationPaths.BITCOIN_SV_REGTEST.BIP44.nUTXODerivationPath);\r\n        });\r\n        const countOfUnusedKeys = this._countOfUnusedKeys(walletKeys);\r\n        const countOfUnusedNUTXOKeys = this._countOfUnusedKeys(nUTXOKeys);\r\n        if (countOfUnusedKeys < 20 || countOfUnusedNUTXOKeys < 20) {\r\n            const bip32ExtendedKey = await Persist.getBip32ExtendedKey();\r\n            const lastKeyIndex = walletKeys[walletKeys.length - 1].indexText\r\n                .split('/')\r\n                .pop();\r\n            const { derivedKeys: nextDerivedKeys } = await this.generateDerivedKeys(bip32ExtendedKey, derivationPaths.BITCOIN_SV_REGTEST.BIP44.derivationPath, Number(lastKeyIndex) + 1, 20 - countOfUnusedKeys, false);\r\n            const nUTXOExtendedKey = await Persist.getNUTXOExtendedKey();\r\n            const lastNUTXOKeyIndex = nUTXOKeys[nUTXOKeys.length - 1].indexText\r\n                .split('/')\r\n                .pop();\r\n            const { derivedKeys: nextNUTXODerivedKeys, } = await this.generateDerivedKeys(nUTXOExtendedKey, derivationPaths.BITCOIN_SV_REGTEST.BIP44.nUTXODerivationPath, Number(lastNUTXOKeyIndex) + 1, 20 - countOfUnusedNUTXOKeys, false);\r\n            const nextKeys = [...nextDerivedKeys, ...nextNUTXODerivedKeys];\r\n            return await this._getOutputs(nextKeys, newDiffOutputs, newKeys);\r\n        }\r\n        else {\r\n            return {\r\n                diffOutputs: newDiffOutputs,\r\n                derivedKeys: walletKeys,\r\n                nUTXODerivedKeys: nUTXOKeys,\r\n            };\r\n        }\r\n    }\r\n    async _getOutputsByAddresses(keys, prevOutputs = [], nextCursor) {\r\n        const addresses = this._getAddressesFromKeys(keys);\r\n        const data = await addressAPI.getOutputsByAddresses(addresses, 100, nextCursor);\r\n        const { outputs } = await Persist.getOutputs();\r\n        if (outputs.length > 0) {\r\n            const diffOutputs = await this._getDiffOutputs(data.outputs);\r\n            if (diffOutputs.length === data.outputs.length) {\r\n                const outputs = [...prevOutputs, ...diffOutputs];\r\n                if (data.nextCursor) {\r\n                    return await this._getOutputsByAddresses(keys, outputs, data.nextCursor);\r\n                }\r\n                else {\r\n                    return outputs;\r\n                }\r\n            }\r\n            else {\r\n                return [...prevOutputs, ...diffOutputs];\r\n            }\r\n        }\r\n        else {\r\n            const outputs = [...prevOutputs, ...data.outputs];\r\n            if (data.nextCursor) {\r\n                return await this._getOutputsByAddresses(keys, outputs, data.nextCursor);\r\n            }\r\n            else {\r\n                return outputs;\r\n            }\r\n        }\r\n    }\r\n    async _getDiffOutputs(outputs) {\r\n        const newOutputs = [];\r\n        for (let index = 0; index < outputs.length; index++) {\r\n            if (!(await Persist.isInOutputs(outputs[index]))) {\r\n                newOutputs.push(outputs[index]);\r\n            }\r\n            else {\r\n                return newOutputs;\r\n            }\r\n        }\r\n        return newOutputs;\r\n    }\r\n    async getUnusedNUTXOAddress() {\r\n        const { existingNUTXODerivedKeys } = await Persist.getNUTXODerivedKeys();\r\n        const unusedNUTXODerivedKeys = existingNUTXODerivedKeys\r\n            .filter((existingDerivedKey) => existingDerivedKey.isUsed === false)\r\n            .map(({ indexText, address }) => address);\r\n        return unusedNUTXODerivedKeys.find(Boolean);\r\n    }\r\n    async _getKeys(addresses) {\r\n        const { existingDerivedKeys } = await Persist.getDerivedKeys();\r\n        const { existingNUTXODerivedKeys } = await Persist.getNUTXODerivedKeys();\r\n        const keys = [...existingDerivedKeys, ...existingNUTXODerivedKeys];\r\n        const bip32ExtendedKey = await Persist.getBip32ExtendedKey();\r\n        const nUTXOExtendedKey = await Persist.getNUTXOExtendedKey();\r\n        return addresses.map((address) => {\r\n            const derivedKey = keys.find((derivedKey) => derivedKey.address === address);\r\n            let extendedKey;\r\n            if (derivedKey.indexText.startsWith(derivationPaths.BITCOIN_SV_REGTEST.BIP44.derivationPath)) {\r\n                extendedKey = bip32ExtendedKey;\r\n            }\r\n            else {\r\n                extendedKey = nUTXOExtendedKey;\r\n            }\r\n            const KeyIndex = derivedKey.indexText.split('/').pop();\r\n            const { privkey } = this._getPrivKey(extendedKey, Number(KeyIndex), false);\r\n            return ECPair.fromWIF(privkey, networks.regtest);\r\n        });\r\n    }\r\n    async updateTransactionsConfirmations() {\r\n        const { transactions } = await Persist.getTransactionsByConfirmations();\r\n        const txIds = transactions.map((tx) => tx.txId);\r\n        if (txIds.length > 0) {\r\n            const { txs } = await this._getTransactions(txIds);\r\n            if (txs.length > 0) {\r\n                const { chainInfo } = await chainAPI.getChainInfo();\r\n                if (chainInfo) {\r\n                    const { chainTip } = chainInfo;\r\n                    const txsWithConfirmation = txs.map((transaction) => {\r\n                        const { blockHeight } = transaction;\r\n                        return {\r\n                            ...transaction,\r\n                            confirmation: blockHeight ? chainTip - blockHeight : null,\r\n                        };\r\n                    });\r\n                    const updatedTransactions = [];\r\n                    const deletedTransactions = [];\r\n                    const unconfirmedTransactions = [];\r\n                    transactions.forEach((transaction) => {\r\n                        const matchedTxWithConfirmation = txsWithConfirmation.find((tx) => tx.txId === transaction.txId);\r\n                        if (matchedTxWithConfirmation &&\r\n                            matchedTxWithConfirmation.confirmation !==\r\n                                transaction.confirmation) {\r\n                            updatedTransactions.push({\r\n                                ...transaction,\r\n                                confirmation: matchedTxWithConfirmation.confirmation,\r\n                            });\r\n                        }\r\n                        else if (transaction.confirmation === null) {\r\n                            unconfirmedTransactions.push({\r\n                                ...transaction,\r\n                            });\r\n                        }\r\n                    });\r\n                    await Persist.upsertTransactions(updatedTransactions);\r\n                    if (unconfirmedTransactions.length > 0) {\r\n                        for (let index = 0; index < unconfirmedTransactions.length; index++) {\r\n                            const unconfirmedTransaction = unconfirmedTransactions[index];\r\n                            const diffInMinutes = differenceInMinutes(new Date(), Date.parse(unconfirmedTransaction.createdAt));\r\n                            if (diffInMinutes > 30) {\r\n                                // make inputs of the tx as unspent\r\n                                const unspentOutputs = unconfirmedTransaction.inputs.map((input) => {\r\n                                    return {\r\n                                        outputTxHash: input.outputTxHash,\r\n                                        outputIndex: input.txInputIndex,\r\n                                    };\r\n                                });\r\n                                await Persist.markOutputAsUnspent(unspentOutputs);\r\n                                // delete own outputs of this tx\r\n                                const ownOutputs = unconfirmedTransaction.outputs.filter((output) => output.isMine === true);\r\n                                const deletedOutputs = ownOutputs.map((output) => {\r\n                                    return {\r\n                                        outputTxHash: unconfirmedTransaction.txId,\r\n                                        outputIndex: output.outputIndex,\r\n                                    };\r\n                                });\r\n                                await Persist.deleteOutputs(deletedOutputs);\r\n                                // delete transaction\r\n                                deletedTransactions.push(unconfirmedTransaction);\r\n                                await Persist.deleteTransactions([unconfirmedTransaction]);\r\n                            }\r\n                        }\r\n                        return {\r\n                            updatedTransactions,\r\n                            deletedTransactions,\r\n                        };\r\n                    }\r\n                    return { updatedTransactions, deletedTransactions };\r\n                }\r\n            }\r\n        }\r\n        return { updatedTransactions: [], deletedTransactions: [] };\r\n    }\r\n    async relayTx(psbt, transaction, inputs, ownOutputs) {\r\n        const transactionHex = transaction.toHex();\r\n        const base64 = Buffer.from(transactionHex, 'hex').toString('base64');\r\n        const { txBroadcast } = await transactionAPI.broadcastRawTransaction(base64);\r\n        if (txBroadcast) {\r\n            const spentUtxos = inputs.map((input) => ({\r\n                ...input,\r\n                isSpent: true,\r\n            }));\r\n            const changeOutputs = ownOutputs.map((ownOutput, index) => {\r\n                const transactionOutput = transaction.outs.find((output, index) => {\r\n                    if (!Buffer.from(output.script)\r\n                        .toString('hex')\r\n                        .startsWith('006a0f416c6c65676f72792f416c6c506179')) {\r\n                        const p2pkh = payments.p2pkh({\r\n                            output: output.script,\r\n                            network: network.BITCOIN_SV_REGTEST,\r\n                        });\r\n                        return ownOutput.address === p2pkh.address;\r\n                    }\r\n                    return false;\r\n                });\r\n                const transactionIndex = transaction.outs.findIndex((output, index) => {\r\n                    if (!Buffer.from(output.script)\r\n                        .toString('hex')\r\n                        .startsWith('006a0f416c6c65676f72792f416c6c506179')) {\r\n                        const p2pkh = payments.p2pkh({\r\n                            output: output.script,\r\n                            network: network.BITCOIN_SV_REGTEST,\r\n                        });\r\n                        return ownOutput.address === p2pkh.address;\r\n                    }\r\n                    return false;\r\n                });\r\n                return {\r\n                    address: ownOutput.address,\r\n                    isSpent: false,\r\n                    outputIndex: transactionIndex,\r\n                    outputTxHash: transaction.getId(),\r\n                    value: transactionOutput?.value,\r\n                };\r\n            });\r\n            const unconfirmedTransaction = {\r\n                txId: transaction.getId(),\r\n                inputs: transaction.ins.map((input, index) => {\r\n                    const p2pkh = payments.p2pkh({\r\n                        input: input.script,\r\n                        network: network.BITCOIN_SV_REGTEST,\r\n                    });\r\n                    const isMineInput = inputs.find((inp) => {\r\n                        return (inp.outputTxHash ===\r\n                            Buffer.from(input.hash).reverse().toString('hex') &&\r\n                            inp.outputIndex === input.index);\r\n                    });\r\n                    return {\r\n                        address: p2pkh.address,\r\n                        isMine: isMineInput ? true : false,\r\n                        isNUTXO: isMineInput && isMineInput.isNameOutpoint ? true : false,\r\n                        txInputIndex: input.index,\r\n                        outputTxHash: Buffer.from(input.hash).reverse().toString('hex'),\r\n                        value: psbt.data.inputs[index].witnessUtxo?.value,\r\n                    };\r\n                }),\r\n                outputs: transaction.outs.map((output, index) => {\r\n                    if (!Buffer.from(output.script)\r\n                        .toString('hex')\r\n                        .startsWith('006a0f416c6c65676f72792f416c6c506179')) {\r\n                        const p2pkh = payments.p2pkh({\r\n                            output: output.script,\r\n                            network: network.BITCOIN_SV_REGTEST,\r\n                        });\r\n                        const isMineOutput = ownOutputs.find((ownOutput) => {\r\n                            return ownOutput.address === p2pkh.address;\r\n                        });\r\n                        return {\r\n                            address: p2pkh.address,\r\n                            isMine: isMineOutput ? true : false,\r\n                            isNUTXO: isMineOutput && isMineOutput.type === 'nUTXO' ? true : false,\r\n                            lockingScript: Buffer.from(output.script).toString('hex'),\r\n                            outputIndex: index,\r\n                            value: output.value,\r\n                        };\r\n                    }\r\n                    else {\r\n                        return {\r\n                            address: null,\r\n                            isMine: false,\r\n                            isNUTXO: false,\r\n                            lockingScript: Buffer.from(output.script).toString('hex'),\r\n                            outputIndex: index,\r\n                            value: output.value,\r\n                        };\r\n                    }\r\n                }),\r\n                confirmation: null,\r\n                createdAt: new Date(),\r\n            };\r\n            const { outputs } = await this.processAllegoryTransactions(changeOutputs, [unconfirmedTransaction]);\r\n            await this.markAddressesUsed(ownOutputs.map(({ address }) => address));\r\n            await Persist.upsertOutputs(spentUtxos);\r\n            await Persist.upsertOutputs(outputs);\r\n            await Persist.upsertTransactions([unconfirmedTransaction]);\r\n            return { transaction: unconfirmedTransaction, txBroadcast };\r\n        }\r\n        throw new Error('Broadcast failed');\r\n    }\r\n    async _createSendTransaction(utxos, targets, feeRate) {\r\n        try {\r\n            // let feeRate = 5; // satoshis per byte\r\n            // if (transactionFee === 0) {\r\n            //   feeRate = 0;\r\n            // }\r\n            let { inputs, outputs } = coinSelect(utxos, targets, feeRate);\r\n            if (!inputs || !outputs)\r\n                throw new Error('Empty inputs or outputs');\r\n            // if (transactionFee !== fee) {\r\n            //   const changeOutputs = outputs.filter((output: { address: any }) => {\r\n            //     if (!output.address) return true;\r\n            //     return false;\r\n            //   });\r\n            //   const diffFee = fee - transactionFee;\r\n            //   if (changeOutputs.length > 0) {\r\n            //     changeOutputs[0].value = Number(changeOutputs[0].value) + diffFee;\r\n            //   }\r\n            // }\r\n            const psbt = new Psbt({\r\n                network: network.BITCOIN_SV_REGTEST,\r\n                forkCoin: 'bch',\r\n            });\r\n            psbt.setVersion(1);\r\n            inputs.forEach((input) => {\r\n                const p2pkh = payments.p2pkh({\r\n                    address: input.address,\r\n                    network: network.BITCOIN_SV_REGTEST,\r\n                });\r\n                psbt.addInput({\r\n                    hash: input.outputTxHash,\r\n                    index: input.outputIndex,\r\n                    witnessUtxo: {\r\n                        script: p2pkh.output,\r\n                        value: input.value,\r\n                    },\r\n                });\r\n            });\r\n            const usedAddresses = [];\r\n            for (let index = 0; index < outputs.length; index++) {\r\n                const output = outputs[index];\r\n                if (!output.address) {\r\n                    const { unusedAddresses } = await this.getUnusedAddresses({\r\n                        excludeAddresses: usedAddresses,\r\n                    });\r\n                    const address = unusedAddresses[0];\r\n                    usedAddresses.push({ type: '', title: '', address });\r\n                    output.address = address;\r\n                }\r\n                psbt.addOutput({\r\n                    address: output.address,\r\n                    value: output.value,\r\n                });\r\n            }\r\n            const addresses = inputs.map((input) => input.address);\r\n            const keys = await this._getKeys(addresses);\r\n            keys.forEach((key, i) => {\r\n                psbt.signInput(i, key);\r\n            });\r\n            psbt.validateSignaturesOfAllInputs();\r\n            psbt.finalizeAllInputs();\r\n            const transaction = psbt.extractTransaction(true);\r\n            return await this.relayTx(psbt, transaction, inputs, usedAddresses);\r\n        }\r\n        catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n    async createSendTransaction(receiverAddress, amountInSatoshi, feeRate) {\r\n        const { utxos } = await Persist.getUTXOs();\r\n        const targets = [\r\n            { address: receiverAddress, value: Number(amountInSatoshi) },\r\n        ];\r\n        return await this._createSendTransaction(utxos, targets, feeRate);\r\n    }\r\n    async getTransactionFee(receiverAddress, amountInSatoshi, feeRate) {\r\n        try {\r\n            const { utxos } = await Persist.getUTXOs();\r\n            const targets = [\r\n                { address: receiverAddress, value: Number(amountInSatoshi) },\r\n            ];\r\n            let { fee } = coinSelect(utxos, targets, feeRate);\r\n            // if (!inputs) throw new Error('Not sufficient funds');\r\n            // if (!outputs) throw new Error('No Receiver specified');\r\n            return fee;\r\n        }\r\n        catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n    async getBalance() {\r\n        const { outputs } = await Persist.getOutputs();\r\n        const balance = outputs.reduce((acc, currOutput) => {\r\n            if (!currOutput.isSpent) {\r\n                acc = acc + currOutput.value;\r\n            }\r\n            return acc;\r\n        }, 0);\r\n        return { balance };\r\n    }\r\n    generateMnemonic(strength, rng, wordlist) {\r\n        return bip39.generateMnemonic(strength, rng, wordlist);\r\n    }\r\n    async getUsedAddresses() {\r\n        const { outputs } = await Persist.getOutputs();\r\n        const outputsGroupedByAddress = _.groupBy(outputs, (output) => {\r\n            return output.address;\r\n        });\r\n        const usedAddresses = [];\r\n        for (const [address, outputs] of Object.entries(outputsGroupedByAddress)) {\r\n            const currentBalance = outputs.reduce((acc, currOutput) => {\r\n                if (!currOutput.spendInfo) {\r\n                    acc = acc + currOutput.value;\r\n                }\r\n                return acc;\r\n            }, 0);\r\n            let incomingBalance = 0;\r\n            let outgoingBalance = 0;\r\n            outputs.forEach((output) => {\r\n                if (output.spendInfo) {\r\n                    outgoingBalance = outgoingBalance + output.value;\r\n                }\r\n                incomingBalance = incomingBalance + output.value;\r\n            });\r\n            usedAddresses.push({\r\n                address,\r\n                incomingBalance,\r\n                outgoingBalance,\r\n                currentBalance,\r\n                lastTransaction: outputs[0].address,\r\n            });\r\n        }\r\n        return {\r\n            usedAddresses,\r\n        };\r\n    }\r\n    async getUnusedAddresses(options) {\r\n        const { existingDerivedKeys } = await Persist.getDerivedKeys();\r\n        const unusedAddresses = existingDerivedKeys\r\n            .filter((existingDerivedKey) => existingDerivedKey.isUsed === false)\r\n            .map(({ address }) => address);\r\n        if (options?.excludeAddresses) {\r\n            const filteredUnusedAddresses = unusedAddresses.filter((unusedAddress) => {\r\n                return !options.excludeAddresses?.includes(unusedAddress);\r\n            });\r\n            if (options?.count) {\r\n                return {\r\n                    unusedAddresses: filteredUnusedAddresses.slice(0, options.count),\r\n                };\r\n            }\r\n            else {\r\n                return {\r\n                    unusedAddresses: filteredUnusedAddresses.slice(0, 1),\r\n                };\r\n            }\r\n        }\r\n        if (options?.count) {\r\n            return {\r\n                unusedAddresses: unusedAddresses.slice(0, options.count),\r\n            };\r\n        }\r\n        return {\r\n            unusedAddresses: unusedAddresses.slice(0, 1),\r\n        };\r\n    }\r\n    async markAddressesUsed(addresses) {\r\n        await Persist.markAddressesUsed(addresses);\r\n    }\r\n    async login(profileId, password) {\r\n        try {\r\n            const bip39Mnemonic = await Persist.login(profileId, password);\r\n            await Persist.init(profileId);\r\n            await this._initWallet(bip39Mnemonic);\r\n            return { profile: profileId };\r\n        }\r\n        catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n    async createProfile(bip39Mnemonic, password) {\r\n        const cryptedText = AES.encrypt(bip39Mnemonic, password).toString();\r\n        const profileName = faker.name.firstName();\r\n        localStorage.setItem('currentprofile', profileName);\r\n        try {\r\n            await Persist.createProfile(cryptedText, profileName);\r\n            return { profile: profileName };\r\n        }\r\n        catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n    async updateProfileName(currentProfileName, newProfileName) {\r\n        try {\r\n            await Persist.updateProfile(currentProfileName, newProfileName);\r\n            return { profile: newProfileName };\r\n        }\r\n        catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n    async getProfiles() {\r\n        return { profiles: await Persist.getProfiles() };\r\n    }\r\n    async getUnregisteredName() {\r\n        return await Persist.getUnregisteredName();\r\n    }\r\n    async logout() {\r\n        return await Persist.destroy();\r\n    }\r\n    async runScript() {\r\n        const targets = [\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n            { address: 'mruMP6ZsrgnqMs1S39nAJNDrwJd2i12eNx', value: 500 },\r\n        ];\r\n        // const { utxos } = await Persist.getUTXOs();\r\n        // const feeRate = 5;\r\n        // await this._createSendTransaction(utxos, targets, feeRate);\r\n        const keys = await this._getKeys([\r\n            'mmFXRtUtKN9znnF9DFgQqvKP5TBHZmgmym',\r\n        ]);\r\n        console.log(keys[0].privateKey.toString('hex'));\r\n        // const { utxos } = await Persist.getUTXOs();\r\n        // const balance = utxos.reduce((acc: number, currOutput: any) => {\r\n        //   if (!currOutput.isSpent) {\r\n        //     acc = acc + currOutput.value;\r\n        //   }\r\n        //   return acc;\r\n        // }, 0);\r\n    }\r\n}\r\nexport default new Wallet();\r\n//# sourceMappingURL=Wallet.js.map","references":["/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/node_modules/bitcoinjs-lib/types/index.d.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/node_modules/@types/crypto-js/aes/index.d.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/node_modules/coinselect/index.js","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/node_modules/@types/faker/index.d.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/node_modules/bip39/types/index.d.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/node_modules/@types/lodash/index.d.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/node_modules/date-fns/typings.d.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/src/Allegory.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/src/Persist.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/src/constants/derivationPaths.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/src/constants/network.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/src/AddressAPI.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/src/TransactionAPI.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/src/ChainAPI.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/src/Utils.ts","/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/src/httpClient.ts"],"map":"{\"version\":3,\"file\":\"Wallet.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/Wallet.ts\"],\"names\":[],\"mappings\":\"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AAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;YAC7D,EAAE,OAAO,EAAE,oCAAoC,EAAE,KAAK,EAAE,GAAG,EAAE;SAC9D,CAAC;QACF,8CAA8C;QAC9C,qBAAqB;QACrB,8DAA8D;QAC9D,MAAM,IAAI,GAAU,MAAM,IAAI,CAAC,QAAQ,CAAC;YACtC,oCAAoC;SACrC,CAAC,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;QAChD,8CAA8C;QAC9C,mEAAmE;QACnE,+BAA+B;QAC/B,oCAAoC;QACpC,MAAM;QACN,gBAAgB;QAChB,SAAS;IACX,CAAC;CACF;AAED,eAAe,IAAI,MAAM,EAAE,CAAC\"}","dts":{"name":"/home/xkn/Desktop/integration/nipkow/lib/nipkow-sdk/Wallet.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"node\" />\r\n/// <reference types=\"pouchdb-core\" />\r\nimport { Network, Psbt, Transaction } from 'bitcoinjs-lib';\r\ndeclare class Wallet {\r\n    _initWallet(bip39Mnemonic: string, password?: string): Promise<void>;\r\n    _mnemonicToSeedSync(bip39Mnemonic: string, password?: string): Buffer;\r\n    _getBIP32RootKeyFromSeed(seed: Buffer, network?: Network): string;\r\n    _getBIP32ExtendedKey(path: string, bip32RootKey: string): string;\r\n    getBIP32ExtendedPrivKey: (bip32ExtendedKey: string) => string;\r\n    getBIP32ExtendedPubKey: (bip32ExtendedKey: string) => string;\r\n    _generateDerivedKeys(bip32ExtendedKey: string, derivationPath: string, index: number, useBip38?: boolean, bip38password?: string, useHardenedAddresses?: boolean): {\r\n        indexText: string;\r\n        address: string;\r\n    };\r\n    _getPrivKey(bip32ExtendedKey: string, index: number, useBip38?: boolean, bip38password?: string, useHardenedAddresses?: boolean): {\r\n        privkey: string;\r\n    };\r\n    generateDerivedKeys(bip32ExtendedKey: string, derivationPath: string, indexStart: number, count: number, useBip38: boolean, bip38password?: string, useHardenedAddresses?: boolean): Promise<{\r\n        derivedKeys: {\r\n            isUsed: boolean;\r\n            indexText: string;\r\n            address: string;\r\n        }[];\r\n    }>;\r\n    _getAddressesFromKeys(derivedKeys: any[]): any[];\r\n    _countOfUnusedKeys(keys: any[]): any;\r\n    _removeDuplicate(outputs: any[]): any[];\r\n    processAllegoryTransactions(outputs: any[], transactions: any[]): Promise<{\r\n        outputs: ({\r\n            outputTxHash: any;\r\n            outputIndex: any;\r\n        } | {\r\n            name: any;\r\n            isNameOutpoint: boolean;\r\n            outputTxHash: any;\r\n            outputIndex: any;\r\n        })[];\r\n    }>;\r\n    getTransactions(options?: {\r\n        startkey?: string;\r\n        limit?: number;\r\n        pageNo?: number;\r\n        diff?: boolean;\r\n    }): Promise<{\r\n        nextTransactionCursor: any;\r\n        transactions: any;\r\n    } | {\r\n        transactions: {\r\n            txId: any;\r\n            inputs: any;\r\n            outputs: any;\r\n            confirmation?: number | null | undefined;\r\n        }[];\r\n    }>;\r\n    _getTransactions(txIds: string[]): Promise<{\r\n        txs: any[];\r\n    }>;\r\n    _getOutputs(derivedKeys: any[], prevDiffOutputs?: any[], prevKeys?: any[]): Promise<any>;\r\n    _getOutputsByAddresses(keys: any[], prevOutputs?: any[], nextCursor?: number): Promise<any>;\r\n    _getDiffOutputs(outputs: any): Promise<any[]>;\r\n    getUnusedNUTXOAddress(): Promise<any>;\r\n    _getKeys(addresses: string[]): Promise<object[]>;\r\n    updateTransactionsConfirmations(): Promise<{\r\n        updatedTransactions: any[];\r\n        deletedTransactions: any[];\r\n    }>;\r\n    relayTx(psbt: Psbt, transaction: Transaction, inputs: any[], ownOutputs: any[]): Promise<{\r\n        transaction: {\r\n            txId: string;\r\n            inputs: {\r\n                address: string;\r\n                isMine: boolean;\r\n                isNUTXO: boolean;\r\n                txInputIndex: number;\r\n                outputTxHash: string;\r\n                value: number | undefined;\r\n            }[];\r\n            outputs: ({\r\n                address: string;\r\n                isMine: boolean;\r\n                isNUTXO: boolean;\r\n                lockingScript: string;\r\n                outputIndex: number;\r\n                value: number;\r\n            } | {\r\n                address: null;\r\n                isMine: boolean;\r\n                isNUTXO: boolean;\r\n                lockingScript: string;\r\n                outputIndex: number;\r\n                value: number;\r\n            })[];\r\n            confirmation: null;\r\n            createdAt: Date;\r\n        };\r\n        txBroadcast: any;\r\n    }>;\r\n    _createSendTransaction(utxos: any[], targets: any[], feeRate: number): Promise<{\r\n        transaction: {\r\n            txId: string;\r\n            inputs: {\r\n                address: string;\r\n                isMine: boolean;\r\n                isNUTXO: boolean;\r\n                txInputIndex: number;\r\n                outputTxHash: string;\r\n                value: number | undefined;\r\n            }[];\r\n            outputs: ({\r\n                address: string;\r\n                isMine: boolean;\r\n                isNUTXO: boolean;\r\n                lockingScript: string;\r\n                outputIndex: number;\r\n                value: number;\r\n            } | {\r\n                address: null;\r\n                isMine: boolean;\r\n                isNUTXO: boolean;\r\n                lockingScript: string;\r\n                outputIndex: number;\r\n                value: number;\r\n            })[];\r\n            confirmation: null;\r\n            createdAt: Date;\r\n        };\r\n        txBroadcast: any;\r\n    }>;\r\n    createSendTransaction(receiverAddress: string, amountInSatoshi: number, feeRate: number): Promise<{\r\n        transaction: {\r\n            txId: string;\r\n            inputs: {\r\n                address: string;\r\n                isMine: boolean;\r\n                isNUTXO: boolean;\r\n                txInputIndex: number;\r\n                outputTxHash: string;\r\n                value: number | undefined;\r\n            }[];\r\n            outputs: ({\r\n                address: string;\r\n                isMine: boolean;\r\n                isNUTXO: boolean;\r\n                lockingScript: string;\r\n                outputIndex: number;\r\n                value: number;\r\n            } | {\r\n                address: null;\r\n                isMine: boolean;\r\n                isNUTXO: boolean;\r\n                lockingScript: string;\r\n                outputIndex: number;\r\n                value: number;\r\n            })[];\r\n            confirmation: null;\r\n            createdAt: Date;\r\n        };\r\n        txBroadcast: any;\r\n    }>;\r\n    getTransactionFee(receiverAddress: string, amountInSatoshi: number, feeRate: number): Promise<any>;\r\n    getBalance(): Promise<{\r\n        balance: any;\r\n    }>;\r\n    generateMnemonic(strength?: number, rng?: (size: number) => Buffer, wordlist?: string[]): string;\r\n    getUsedAddresses(): Promise<{\r\n        usedAddresses: {\r\n            address: string;\r\n            incomingBalance: number;\r\n            outgoingBalance: number;\r\n            currentBalance: number;\r\n            lastTransaction: any;\r\n        }[];\r\n    }>;\r\n    getUnusedAddresses(options?: {\r\n        excludeAddresses?: string[];\r\n        count?: number;\r\n    }): Promise<{\r\n        unusedAddresses: any[];\r\n    }>;\r\n    markAddressesUsed(addresses: string[]): Promise<void>;\r\n    login(profileId: string, password: string): Promise<{\r\n        profile: string;\r\n    }>;\r\n    createProfile(bip39Mnemonic: string, password: string): Promise<{\r\n        profile: string;\r\n    }>;\r\n    updateProfileName(currentProfileName: string, newProfileName: string): Promise<{\r\n        profile: string;\r\n    }>;\r\n    getProfiles(): Promise<{\r\n        profiles: any;\r\n    }>;\r\n    getUnregisteredName(): Promise<{\r\n        names: any;\r\n    }>;\r\n    logout(): Promise<boolean>;\r\n    runScript(): Promise<void>;\r\n}\r\ndeclare const _default: Wallet;\r\nexport default _default;\r\n"}}
